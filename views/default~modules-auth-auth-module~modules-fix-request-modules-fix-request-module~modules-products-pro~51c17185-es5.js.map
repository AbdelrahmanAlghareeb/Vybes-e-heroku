{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js"],"names":["listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","CdkAutofill_Factory","ɵdir","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_document","_textareaElement","nativeElement","_measuringClass","FIREFOX","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","resizeToFitContent","window","_getWindow","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","_setMinHeight","_setMaxHeight","force","_cacheTextareaLineHeight","textarea","value","_minRows","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","_maxRows","reset","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","decorators","host","TextFieldModule","ɵmod","ɵinj","TextFieldModule_Factory","imports","ngJitMode","declarations","exports","_c0","_c1","enterDuration","_c2","MAT_CHECKBOX_DEFAULT_OPTIONS","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","tabIndex","_clickAction","_animationMode","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","disableRipple","disabled","detectChanges","checked","fn","isDisabled","indeterminate","newState","oldState","length","_getAnimationClassForCheckStateTransition","animationClass","source","stopPropagation","toggle","_transitionCheckState","_emitChangeEvent","_inputElement","origin","options","focusVia","animSuffix","nativeCheckbox","_required","newValue","changed","MatCheckbox_Factory","ɵcmp","viewQuery","MatCheckbox_Query","_t","first","ripple","hostVars","MatCheckbox_HostBindings","required","ariaDescribedby","features","ngContentSelectors","decls","vars","consts","template","MatCheckbox_Template","MatCheckbox_Template_input_change_3_listener","$event","_onInteractionEvent","MatCheckbox_Template_input_click_3_listener","_onInputClick","MatCheckbox_Template_span_cdkObserveContent_12_listener","_onLabelTextChange","_r0","_r2","inputId","textContent","trim","_getAriaChecked","_isRippleDisabled","directives","styles","encapsulation","changeDetection","String","providers","None","OnPush","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","MatCheckboxRequiredValidator_Factory","ɵMatCheckboxRequiredValidator_BaseFactory","_MatCheckboxRequiredValidatorModule","_MatCheckboxRequiredValidatorModule_Factory","MatCheckboxModule","MatCheckboxModule_Factory","MatTextareaAutosize","MatTextareaAutosize_Factory","ɵMatTextareaAutosize_BaseFactory","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","inputValueAccessor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_type","_readonly","_neverEmptyInputTypes","filter","has","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","IOS","el","_isServer","_isNativeSelect","_isTextarea","multiple","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","isFocused","readonly","_a","_b","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","indexOf","ngDevMode","validity","badInput","ids","join","_id","_validateType","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","MatInput_Factory","MatInput_HostBindings","MatInput_focus_HostBindingHandler","_focusChanged","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","errorState","toString","errorStateMatcher","userAriaDescribedBy","MatInputModule","MatInputModule_Factory"],"mappings":"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","file":"default~modules-auth-auth-module~modules-fix-request-modules-fix-request-module~modules-products-pro~51c17185-es5.js","sourcesContent":["import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add(this._measuringClass);\n        textarea.placeholder = '';\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove(this._measuringClass);\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, \n    /**\n     * @deprecated `_clickAction` parameter to be removed, use\n     * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n     * @breaking-change 10.0.0\n     */\n    _clickAction, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || {};\n        if (this._options.color) {\n            this.color = this.defaultColor = this._options.color;\n        }\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n        this._clickAction = this._clickAction || this._options.clickAction;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Whether the checkbox is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() { return this._checked; }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() { return this._indeterminate; }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin = 'keyboard', options) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix = newState === 2 /* Unchecked */ ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8)); };\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(MatRipple, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 20, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <div class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <div matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div>\\n    </div>\\n    <div class=\\\"mat-checkbox-frame\\\"></div>\\n    <div class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <div class=\\\"mat-checkbox-mixedmark\\\"></div>\\n    </div>\\n  </div>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_CLICK_ACTION]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) { return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator); };\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatCheckboxRequiredValidatorModule });\n_MatCheckboxRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatCheckboxRequiredValidatorModule_Factory(t) { return new (t || _MatCheckboxRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, { declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); }, imports: [[\n            MatRippleModule, MatCommonModule, ObserversModule,\n            _MatCheckboxRequiredValidatorModule\n        ],\n        MatCommonModule,\n        _MatCheckboxRequiredValidatorModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule,\n        _MatCheckboxRequiredValidatorModule]; }, exports: function () { return [MatCheckbox,\n        MatCommonModule,\n        _MatCheckboxRequiredValidatorModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CLICK_ACTION, MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n\n//# sourceMappingURL=checkbox.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    let el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ],\n        TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput,\n        MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput,\n        MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map"]}