{"version":3,"sources":["./src/app/modules/auth/auth-routing.module.ts","./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/components/auth-layout/auth-layout.component.ts","./src/app/modules/auth/components/auth-layout/auth-layout.component.html","./src/app/modules/auth/components/confirm-email/confirm-email.component.ts","./src/app/modules/auth/components/forget-password/forget-password.component.ts","./src/app/modules/auth/components/forget-password/forget-password.component.html","./src/app/modules/auth/components/index.ts","./src/app/modules/auth/components/login/login.component.ts","./src/app/modules/auth/components/login/login.component.html","./src/app/modules/auth/components/new-password/new-password.component.ts","./src/app/modules/auth/components/new-password/new-password.component.html","./src/app/modules/auth/components/register/_controls/basic-info/ComparePassword.Module.ts","./src/app/modules/auth/components/register/_controls/basic-info/basic-info.component.ts","./src/app/modules/auth/components/register/_controls/basic-info/basic-info.component.html","./src/app/modules/auth/components/register/_controls/basic-info/confirm-equal-validator.directive.ts","./src/app/modules/auth/components/register/_controls/company-info/company-info.component.ts","./src/app/modules/auth/components/register/_controls/company-info/company-info.component.html","./src/app/modules/auth/components/register/_controls/contact-info/contact-info.component.ts","./src/app/modules/auth/components/register/_controls/contact-info/contact-info.component.html","./src/app/modules/auth/components/register/_controls/store-info/store-info.component.ts","./src/app/modules/auth/components/register/_controls/store-info/store-info.component.html","./src/app/modules/auth/components/register/register-business-user/register-business-user.component.ts","./src/app/modules/auth/components/register/register-business-user/register-business-user.component.html","./src/app/modules/auth/components/register/register-entry-point/register-entry-point.component.ts","./src/app/modules/auth/components/register/register-entry-point/register-entry-point.component.html","./src/app/modules/auth/components/register/register-normal-user/register-normal-user.component.ts","./src/app/modules/auth/components/register/register-normal-user/register-normal-user.component.html","./src/app/modules/auth/models/confirm-email-request.model.ts","./src/app/modules/auth/models/forget-password-request.model.ts","./src/app/modules/auth/models/index.ts","./src/app/modules/auth/models/login-request.model.ts","./src/app/modules/auth/models/register-request-business.model.ts","./src/app/modules/auth/models/register-request.model.ts","./src/app/modules/auth/models/reset-password-request.model.ts","./src/app/modules/auth/models/userData.model.ts","./src/app/modules/auth/models/userType.enum.ts","./src/app/shared/validations/custom-validation.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACuG;AACzE;;;AAIrF,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAC,EAAE;QACP,SAAS,EAAG,iGAAmB;QAC/B,QAAQ,EAAG;YACT,EAAE,IAAI,EAAC,UAAU,EAAE,QAAQ,EAAG;oBAC1B,EAAE,IAAI,EAAC,EAAE,EAAE,SAAS,EAAC,uEAA2B,EAAE;oBAClD,EAAE,IAAI,EAAC,OAAO,EAAE,SAAS,EAAC,uEAA2B,EAAE;oBACvD,EAAE,IAAI,EAAC,UAAU,EAAE,SAAS,EAAC,yEAA6B,EAAE;iBAC7D;aACF;YACD,EAAE,IAAI,EAAC,OAAO,EAAE,SAAS,EAAC,0DAAc,EAAE;YAC1C,EAAE,IAAI,EAAC,eAAe,EAAE,SAAS,EAAC,iEAAqB,EAAE;SAC1D;KACF;CACF,CAAC;AAMK,MAAM,iBAAiB;;gGAAjB,iBAAiB;4JAAjB,iBAAiB,kBAHnB,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC9B,4DAAY;mIAEX,iBAAiB,uFAFlB,4DAAY;6FAEX,iBAAiB;cAJ7B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;AC3BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACD;AAEW;AAC4H;AACvF;AAC9B;AACL;AAGM;AACT;AACM;AACV;AACM;AACJ;AACI;AAEgD;AACN;AACM;AACN;AACV;AACN;AACqB;;AAE1G,yBAAyB;AACzB,WAAW;AA4CJ,MAAM,UAAU;;yFAAV,UAAU;8IAAV,UAAU,mBAJV;QACT,6EAAc;KACf,YAxBQ;YACP,4DAAY;YACZ,sEAAiB;YACjB,4GAAuB;YACvB,kEAAY;YACZ,mEAAmB;YACnB,+EAAkB;YAClB,sEAAc;YACd,4EAAiB;YACjB,yEAAe;YACf,qEAAa;YACb,yEAAe;YACf,sHAAqB;SACtB;QAEC,+EAAkB;QAClB,sEAAc;QACd,4EAAiB;QACjB,yEAAe;QACf,qEAAa;QACb,yEAAe;mIAMN,UAAU,mBAxCnB,0DAAc;QACd,yEAA6B;QAC7B,uEAA2B;QAC3B,mEAAuB;QACvB,gEAAoB;QACpB,uEAA2B;QAC3B,yBAAyB;QACzB,uHAAoB;QACpB,iHAAkB;QAClB,uHAAoB;QACpB,iHAAkB;QAClB,wGAAqB;QACrB,kGAAmB,aAGnB,4DAAY;QACZ,sEAAiB;QACjB,4GAAuB;QACvB,kEAAY;QACZ,mEAAmB;QACnB,+EAAkB;QAClB,sEAAc;QACd,4EAAiB;QACjB,yEAAe;QACf,qEAAa;QACb,yEAAe;QACf,sHAAqB,aAGrB,+EAAkB;QAClB,sEAAc;QACd,4EAAiB;QACjB,yEAAe;QACf,qEAAa;QACb,yEAAe;6FAMN,UAAU;cA1CtB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,0DAAc;oBACd,yEAA6B;oBAC7B,uEAA2B;oBAC3B,mEAAuB;oBACvB,gEAAoB;oBACpB,uEAA2B;oBAC3B,yBAAyB;oBACzB,uHAAoB;oBACpB,iHAAkB;oBAClB,uHAAoB;oBACpB,iHAAkB;oBAClB,wGAAqB;oBACrB,kGAAmB;iBACpB;gBACD,OAAO,EAAE;oBACP,4DAAY;oBACZ,sEAAiB;oBACjB,4GAAuB;oBACvB,kEAAY;oBACZ,mEAAmB;oBACnB,+EAAkB;oBAClB,sEAAc;oBACd,4EAAiB;oBACjB,yEAAe;oBACf,qEAAa;oBACb,yEAAe;oBACf,sHAAqB;iBACtB;gBACD,OAAO,EAAE;oBACP,+EAAkB;oBAClB,sEAAc;oBACd,4EAAiB;oBACjB,yEAAe;oBACf,qEAAa;oBACb,yEAAe;iBAChB;gBACD,SAAS,EAAE;oBACT,6EAAc;iBACf;aACF;;;;;;;;;;;;;;ACtED;AAAA;AAAA;AAAA;AAAkD;;;;AAO3C,MAAM,mBAAmB;IAE9B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;sFALU,mBAAmB;mGAAnB,mBAAmB;QCPhC,6EACE;QAAA,yEAEE;QAAA,yEACE;QAAA,yEACE;QAAA,oEACF;QAAA,4DAAM;QAEN,yEAEI;QAAA,uEACE;QAAA,kEACI;QACN,4DAAI;QACR,4DAAS;QACX,4DAAM;QAEJ,2EAA+B;QAC/B,yEACI;QAAA,qEACJ;QAAA,4DAAM;QACV,4DAAM;QACR,4DAAU;;QAZG,0DAAoB;QAApB,6IAAoB;;6FDHpB,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,EAAC,6BAA6B,CAAC;aAC1E;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAGC;;;;;AAQ5C,MAAM,qBAAqB;IAGhC,YACU,cAA6B,EAC7B,MAAa,EACb,SAAsB,EACtB,WAA4B,EAC5B,QAAsB;QAJtB,mBAAc,GAAd,cAAc,CAAe;QAC7B,WAAM,GAAN,MAAM,CAAO;QACb,cAAS,GAAT,SAAS,CAAa;QACtB,gBAAW,GAAX,WAAW,CAAiB;QAC5B,aAAQ,GAAR,QAAQ,CAAc;IAC5B,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,MAAM,EAAC,EAAE;YAChD,IAAI,mBAAmB,GAAG,IAAI,2DAAmB,EAAE;YACnD,mBAAmB,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;YACtC,mBAAmB,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM;YAC1C,IAAG,mBAAmB,CAAC,IAAI,IAAI,mBAAmB,CAAC,MAAM,EAAE;gBACzD,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,mBAAmB,CAAC;qBACjD,SAAS,CACR,CAAC,GAAG,EAAC,EAAE;oBACL,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9B,CAAC,CAEF;aACF;QACL,CAAC,CAAC,CAAC;IAEL,CAAC;;0FA5BU,qBAAqB;qGAArB,qBAAqB;6FAArB,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;ACVD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,uBAAuB;IAElC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8FALU,uBAAuB;uGAAvB,uBAAuB;QCPpC,oEAAG;QAAA,iFAAsB;QAAA,4DAAI;;6FDOhB,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,kCAAkC;gBAC/C,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;AACpB;AACc;AAC6B;AACJ;AACA;AACvB;;;;;;;;;;;;;ACLvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACmC;AAGrB;AACI;;;;;;;;;;;;ICM9D,4EAGE;IAAA,8EACF;IAAA,4DAAY;;;IACZ,4EAGA;IAAA,6EACA;IAAA,4DAAY;;;IAUZ,4EAQF;IAAA,iFACF;IAAA,4DAAY;;;IAEV,2EACE;IAAA,uDACF;IAAA,4DAAO;;;IADL,0DACF;IADE,2FACF;;AD5BG,MAAM,cAAc;IAE1B,YACW,eAA8B,EAC9B,SAAsB,EACtB,QAAoB,EACrB,MAAe;QAHd,oBAAe,GAAf,eAAe,CAAe;QAC9B,cAAS,GAAT,SAAS,CAAa;QACtB,aAAQ,GAAR,QAAQ,CAAY;QACrB,WAAM,GAAN,MAAM,CAAS;QAL1B,aAAQ,GAAE,EAAE,CAAC;QAYX,WAAM,GAAa,IAAI,wDAAS,CAAC;YAC/B,OAAO,EAAC,IAAI,0DAAW,CAAE,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,KAAK,CAAC,CAAC;YACrE,UAAU,EAAC,IAAI,0DAAW,CAAE,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAChF,YAAY,EAAC,IAAI,0DAAW,CAAE,IAAI,CAAC;SACpC,CAAC;IAVG,CAAC;IACP,QAAQ,KAAW,CAAC;IAEpB,IAAI,SAAS,KAAqB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAC,CAAC;IACnE,IAAI,YAAY,KAAqB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAC,CAAC;IAQxE,KAAK,CAAC,MAAM;QACV,IAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,yBAAyB,CAAC;SACvD;QACD,IAAI,WAAW,GAAkB,IAAI,wEAAY,EAAG,CAAC;QACrD,OAAO,CAAC,GAAG,CAAE,WAAW,CAAC;QACzB,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK;QACnC,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK;QACrC,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;QAC3C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,SAAS,CAC/C,CAAC,GAAG,EAAC,EAAE;YACL,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,wBAAwB,CAAC;YAChD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC,EAAC,CAAC,GAAqB,EAAC,EAAE;YACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;QACzC,CAAC,CACF;IACH,CAAC;IAGD,kBAAkB;QAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC;;4EA3CU,cAAc;8FAAd,cAAc,0GAHf,CAAC,6EAAc,CAAC;QCX5B,yEACE;QAAA,qEAAI;QAAA,gEAAK;QAAA,4DAAK;QACd,oEAAG;QAAA,iGAAsC;QAAA,4DAAI;QAE/C,4DAAM;QACN,yEACE;QAAA,0EACE;QADyB,0IAAY,qBAAa,IAAC;QACnD,oFACE;QAAA,4EAAW;QAAA,wEAAa;QAAA,4DAAY;QACpC,uEACA;QAAA,wHAGE;QAEF,wHAGA;QAEF,4DAAiB;QACjB,qFACE;QAAA,6EAAW;QAAA,oEAAQ;QAAA,4DAAY;QAC/B,uEACA;QAKA,wHAQF;QAEA,4DAAiB;QACjB,8GACE;QAKA,0EACI;QAAA,mFACE;QAAA,yEACF;QAAA,4DAAe;QACnB,4DAAM;QAEN,2EACE;QAAA,8EAAwC;QAAA,iEAAK;QAAA,4DAAS;QACtD,8EAA0E;QAA/B,uIAAS,wBAAoB,IAAC;QAAC,oEAAQ;QAAA,4DAAS;QAC7F,4DAAM;QAEV,4DAAO;QACT,4DAAM;;QApDE,0DAAoB;QAApB,iFAAoB;QAIX,0DAEmB;QAFnB,iKAEmB;QAGnB,0DAEe;QAFf,8JAEe;QAaxB,0DAKG;QALH,6ZAKG;QAKD,0DAAgB;QAAhB,8EAAgB;;6FD1Bb,cAAc;cAP1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;gBACrC,SAAS,EAAC,CAAC,6EAAc,CAAC;aAE3B;;;;;;;;;;;;;;AEfD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,oBAAoB;IAE/B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;wFALU,oBAAoB;oGAApB,oBAAoB;QCPjC,oEAAG;QAAA,8EAAmB;QAAA,4DAAI;;6FDOb,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAyC;AAEzC,cAAc;AACyD;;AAWhE,MAAM,qBAAqB;;oGAArB,qBAAqB;oKAArB,qBAAqB;mIAArB,qBAAqB,mBAN9B,mFAAgB,aAGhB,mFAAgB;6FAGP,qBAAqB;cARjC,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,mFAAgB;iBACjB;gBACD,OAAO,EAAE;oBACP,mFAAgB;iBACjB;aACF;;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACgD;AAEzB;;;;;;;ICI/D,4EAEE;IAAA,iFACF;IAAA,4DAAY;;;IAOZ,4EACE;IAAA,yJACF;IAAA,4DAAY;;;IAEZ,4EACE;IAAA,iFACF;IAAA,4DAAY;;;IAiBR,uEACE;IAAA,wGACF;IAAA,4DAAO;;;IACP,uEACE;IAAA,yFACF;IAAA,4DAAO;;;IAbX,4EAQI;IAAA,6HACE;IAEF,6HACE;IAEN,4DAAY;;;IANF,0DAAiE;IAAjE,4LAAiE;IAGjE,0DAAgE;IAAhE,2LAAgE;;ADjC7E,MAAM,kBAAkB;IAE7B,gFAAgF;IAGhF,YAAoB,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;IAAI,CAAC;IAExC,QAAQ;QACN,IAAI,CAAC,eAAe,EAAE,CAAC;IAEzB,CAAC;IACD,eAAe;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC7B,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACpD,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC5B,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE;oBACV,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,OAAO,CAAC,wEAAwE,CAAC;iBAC7F;aACF,CAAC;YACF,eAAe,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBACnC,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC;aAClC,CAAC;SACH,EACC,EAAE,SAAS,EAAE,8FAAS,CAAC,UAAU,EAAC,iBAAiB,CAAC,EAAE,CACvD,CAAC;IACJ,CAAC;IAKD;;;;;;OAMG;IAEI,qBAAqB,CAAC,OAAoB;QAC/C,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;YAC/D,MAAM,OAAO,GAAG,CAAC,YAAY,CAAC;YAC9B,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;SAC9C;IACH,CAAC;IAED;;;;;;MAME;IACF,QAAQ;QACN,MAAM,aAAa,GAAG;YACpB,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YAChD,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YAChD,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK;SAC/D;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAED;;;;;;OAMG;IACH,eAAe;QACb,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;QACjB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YACxB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;SAC7B;aAAM;YACL,OAAO,UAAU,CAAC;SACnB;IACH,CAAC;;oFAhFU,kBAAkB;kGAAlB,kBAAkB;QCV/B,yEACE;QAAA,0EACE;QAAA,yEACE;QAAA,yEACE;QAAA,oFACE;QAAA,4EAAY;QAAA,uEAAW;QAAA,4DAAY;QACnC,sEACA;QAAA,0HAEE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,yEACE;QAAA,qFACE;QAAA,6EAAY;QAAA,wEAAW;QAAA,4DAAY;QACnC,0EACA;QAAA,4HACE;QAGF,4HACE;QAEJ,4DAAiB;QACnB,4DAAM;QAEN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,+EAAkB;QAAA,4DAAY;QAC1C,wEAEA;QAAA,4HAQI;QAQN,4DAAiB;QACnB,4DAAM;QAER,4DAAM;QACR,4DAAO;QACT,4DAAM;;QApDE,0DAAuB;QAAvB,oFAAuB;QAOnB,0DAAmK;QAAnK,qbAAmK;QAS1J,0DAAyD;QAAzD,oLAAyD;QAIzD,0DAA+F;QAA/F,gOAA+F;QAYtG,0DAKC;QALD,kYAKC;;6FD5BF,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAA4D;AACe;;AAWpE,MAAM,gBAAgB;IAIzB,QAAQ,CAAC,OAAwB;QAC7B,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC5E,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,EAAE;YAC9D,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;SAC7B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;;gFAVQ,gBAAgB;gGAAhB,gBAAgB,sMALV,CAAC,EAAE,OAAO,EAAE,4DAAa,EAAE,WAAW,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;6FAK9E,gBAAgB;cAR5B,uDAAS;eACN;gBACI,QAAQ,EAAE,6BAA6B;gBACvC,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,4DAAa,EAAE,WAAW,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aACtF;;kBAOA,mDAAK;;;;;;;;;;;;;;ACfV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC+B;;;;;;;;;;ICavE,4EACE;IAAA,qFACF;IAAA,4DAAY;;;IAcZ,4EAIG;IAAA,wFACH;IAAA,4DAAY;;;IAcZ,4EAIG;IAAA,8EACH;IAAA,4DAAY;;;IAcZ,4EAIG;IAAA,4EACH;IAAA,4DAAY;;;IAOV,iFAIA;IAAA,uDACA;IAAA,4DAAa;;;IAHT,2FAAuB;IAE3B,0DACA;IADA,yFACA;;;IAEF,4EAQE;IAAA,iFACF;IAAA,4DAAY;;;IAcZ,4EAIG;IAAA,8EACH;IAAA,4DAAY;;;IACZ,4EAGE;IAAA,6EACJ;IAAA,4DAAY;;;IAcV,4EAQE;IAAA,uFACF;IAAA,4DAAY;;;IAcZ,4EAQE;IAAA,qFACF;IAAA,4DAAY;;AD9Jf,MAAM,oBAAoB;IAO/B,YACU,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;QANzB,cAAS,GAAG;YACV,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE;YAC1B,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;YACzB,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;SAC1B;IAGG,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAGD,iBAAiB;QACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,WAAW,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACvD,cAAc,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC1D,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACjD,GAAG,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC/C,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACpD,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,4BAA4B,CAAC,EAAE,CAAC;YAC5G,WAAW,EAAE,IAAI,0DAAW,CAAC,EAAE,EAC7B,CAAC,yDAAU,CAAC,QAAQ;gBACpB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,mDAAmD;gBACnD,yDAAU,CAAC,OAAO,CAAC,4BAA4B,CAAC;gBAChD,IAAI,CAAC,qBAAqB;aACzB,CAAC;YACJ,mCAAmC;YACnC,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,EAAE,CAAC;SACpF,CAAC,CAAC;IACL,CAAC;IAED;;;;;;KAMC;IAEM,qBAAqB,CAAC,OAAoB;QAC/C,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;YAC/D,MAAM,OAAO,GAAG,CAAC,YAAY,CAAC;YAC9B,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;SAC9C;IACH,CAAC;IAED;;;;;;OAMG;IACH,QAAQ;QACN,MAAM,eAAe,GAAG;YACtB,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK;YACxD,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK;YAC9D,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC5C,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK;YACxC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YAClD,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK;YAC5D,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK;YACxD,yDAAyD;YACzD,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;SAC7C;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;;;;;OAMG;IACH,eAAe;QACb,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;SAC/B;aAAM;YACL,OAAO,UAAU,CAAC;SACnB;IACH,CAAC;;wFAxFU,oBAAoB;oGAApB,oBAAoB;QCRjC,yEACE;QAAA,0EACE;QAAA,yEACE;QAAA,yEACE;QAAA,oFACE;QAAA,4EAAY;QAAA,0EAAc;QAAA,4DAAY;QACtC,sEAQA;QAAA,4HACE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,yEACE;QAAA,qFACE;QAAA,6EAAY;QAAA,8EAAiB;QAAA,4DAAY;QACzC,uEAQA;QAAA,8HAIG;QAEL,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,oEAAO;QAAA,4DAAY;QAC/B,uEAQA;QAAA,8HAIG;QAEL,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,kEAAK;QAAA,4DAAY;QAC7B,uEAQA;QAAA,8HAIG;QAEL,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,kFACE;QAAA,kFAAsB;QAAA,6EAAgB;QAAA,4DAAa;QACnD,iIAIA;QAEF,4DAAa;QACb,8HAQE;QAEN,4DAAiB;QACjB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,oEAAO;QAAA,4DAAY;QAC/B,wEAQA;QAAA,8HAIG;QAEH,8HAGE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,6EAAgB;QAAA,4DAAY;QACxC,wEAQA;QAAA,8HAQE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,2EAAc;QAAA,4DAAY;QACtC,wEAQA;QAAA,8HAQE;QAEJ,4DAAiB;QACnB,4DAAM;QAwBR,4DAAM;QACR,4DAAO;QACT,4DAAM;;QAjME,0DAAyB;QAAzB,sFAAyB;QAaZ,0DAAuL;QAAvL,6dAAuL;QAgBvL,0DAGsC;QAHtC,qfAGsC;QAgBtC,0DAG6B;QAH7B,6aAG6B;QAgB7B,0DAG2B;QAH3B,6ZAG2B;QAUhC,0DAA8B;QAA9B,kFAA8B;QAOlC,0DAKC;QALD,8cAKC;QAiBQ,0DAG6B;QAH7B,sbAG6B;QAG7B,0DAEkE;QAFlE,mbAEkE;QAiB3E,0DAKC;QALD,sfAKC;QAkBD,0DAKC;QALD,seAKC;;6FD3JA,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC+B;;;;;;;;;;ICMrE,iFAIA;IAAA,uDACA;IAAA,4DAAa;;;IAHT,0FAAsB;IAE1B,0DACA;IADA,0FACA;;;IAEF,4EAQE;IAAA,8EACF;IAAA,4DAAY;;;IAcZ,4EACE;IAAA,mFACF;IAAA,4DAAY;;;IAcZ,4EAIG;IAAA,kFACH;IAAA,4DAAY;;;IAOV,iFAIA;IAAA,uDACA;IAAA,4DAAa;;;IAHT,2FAAuB;IAE3B,0DACA;IADA,yFACA;;;IAEF,4EAQA;IAAA,wFACA;IAAA,4DAAY;;;IAcZ,4EAIG;IAAA,sFACH;IAAA,4DAAY;;;IACZ,4EAGE;IAAA,qFACJ;IAAA,4DAAY;;;IAcV,4EAQA;IAAA,+FACA;IAAA,4DAAY;;;IAcZ,4EAQA;IAAA,6FACA;IAAA,4DAAY;;AD/If,MAAM,oBAAoB;IAW/B,YACU,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;QAVzB,cAAS,GAAG;YACV,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAC;YACxB,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAC;YACvB,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAC;SACxB;QACD,WAAM,GAAG;YACP,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAC;YACnB,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAC;SACrB;IAGG,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAGD,iBAAiB;QACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,oBAAoB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChE,kBAAkB,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,gBAAgB,EAAG,IAAI,0DAAW,CAAC,EAAE,CAAC;YACtC,cAAc,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC3D,YAAY,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,EAAC,UAAU,EAAG,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,EAAC,CAAC;YAC1F,SAAS,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtD,QAAQ,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrD,KAAK,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACnD,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,CAAC;IAEhB,CAAC;IAED;;;;;;OAMG;IACH,eAAe;QACb,IAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YACzB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;SAC/B;aAAM;YACL,OAAO,UAAU,CAAC;SACnB;IACH,CAAC;IAED;;;;;;OAMG;IACH,QAAQ;QACN,MAAM,eAAe,GAAG;YACtB,oBAAoB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK;YAC1E,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK;YACtE,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK;YAClE,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK;YAC9D,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK;YAC1D,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK;YACpD,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YAClD,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;SAC7C;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;;wFAvEU,oBAAoB;oGAApB,oBAAoB;QCRjC,yEACE;QAAA,0EACE;QAAA,yEACE;QAAA,yEACE;QAAA,oFACE;QAAA,gFACE;QAAA,gFAAsB;QAAA,yEAAa;QAAA,4DAAa;QAChD,8HAIA;QAEF,4DAAa;QACb,4HAQE;QAEN,4DAAiB;QACjB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,yEAAY;QAAA,4DAAY;QACpC,uEAQA;QAAA,8HACE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,wEAAW;QAAA,4DAAY;QACnC,wEAQA;QAAA,8HAIG;QAEL,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,kFACE;QAAA,iFAAsB;QAAA,6EAAgB;QAAA,4DAAa;QACnD,gIAIA;QAEF,4DAAa;QACb,8HAQA;QAEJ,4DAAiB;QACjB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,oEAAO;QAAA,4DAAY;QAC/B,wEAQA;QAAA,8HAIG;QAEH,8HAGE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,6EAAgB;QAAA,4DAAY;QACxC,wEAQA;QAAA,8HAQA;QAEF,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,2EAAc;QAAA,4DAAY;QACtC,wEAQA;QAAA,8HAQA;QAEF,4DAAiB;QACnB,4DAAM;QAwBR,4DAAM;QACR,4DAAO;QACT,4DAAM;;QAlLE,0DAAyB;QAAzB,sFAAyB;QAOjB,0DAA4B;QAA5B,+EAA4B;QAOhC,0DAKC;QALD,sbAKC;QAiBQ,0DAA+K;QAA/K,6cAA+K;QAgB/K,0DAGgC;QAHhC,qcAGgC;QAUrC,0DAA8B;QAA9B,kFAA8B;QAOlC,0DAKC;QALD,8fAKC;QAiBQ,0DAGoC;QAHpC,8eAGoC;QAGpC,0DAEgF;QAFhF,2eAEgF;QAiBzF,0DAKC;QALD,8iBAKC;QAkBD,0DAKC;QALD,8hBAKC;;6FD5IA,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC+B;;;;;;;;;ICWvE,4EACE;IAAA,iFACF;IAAA,4DAAY;;;IAwBZ,4EACE;IAAA,iFACF;IAAA,4DAAY;;;IAYZ,4EAIE;IAAA,6EACF;IAAA,4DAAY;;;IAOV,iFAIA;IAAA,uDACA;IAAA,4DAAa;;;IAHT,wFAAqB;IAEzB,0DACA;IADA,wFACA;;;IAEF,4EAQA;IAAA,gFACA;IAAA,4DAAY;;ADvEf,MAAM,kBAAkB;IAQ7B,YAAqB,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;QANpC,YAAO,GAAG;YACR,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAC;YACnB,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAC;YACnB,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAC;SACpB;IAEwC,CAAC;IAE1C,QAAQ;QACN,IAAI,CAAC,eAAe,EAAE,CAAC;IAEzB,CAAC;IAGD,eAAe;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC7B,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACpD,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,EAAE,CAAC;YACjC,QAAQ,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrD,IAAI,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACjD,OAAO,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAErD,CAAC,CAAC;IACL,CAAC;IAGD;;;;;;OAMG;IACH,QAAQ;QACN,MAAM,aAAa,GAAG;YACpB,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YAChD,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YAChD,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YAChD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YACxC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK;SAE/C;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAED;;;;;;OAMG;IACH,eAAe;QACb,IAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YACvB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;SAC7B;aAAM;YACL,OAAO,UAAU,CAAC;SACnB;IACH,CAAC;;oFA5DU,kBAAkB;kGAAlB,kBAAkB;QCT/B,yEACE;QAAA,0EACE;QAAA,yEACE;QAAA,yEACE;QAAA,oFACE;QAAA,4EAAY;QAAA,uEAAY;QAAA,4DAAY;QACpC,sEAMA;QAAA,0HACE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,yEACE;QAAA,qFACE;QAAA,6EAAY;QAAA,sEAAS;QAAA,4DAAY;QACjC,uEAOF;QAAA,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,wEAAY;QAAA,4DAAY;QACpC,uEAMA;QAAA,4HACE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAY;QAAA,mEAAM;QAAA,4DAAY;QAC9B,uEAMA;QAAA,4HAIE;QAEJ,4DAAiB;QACnB,4DAAM;QACN,2EACE;QAAA,qFACE;QAAA,kFACE;QAAA,kFAAsB;QAAA,4EAAe;QAAA,4DAAa;QAClD,+HAIA;QAEF,4DAAa;QACb,4HAQA;QAEJ,4DAAiB;QACjB,4DAAM;QACR,4DAAM;QACR,4DAAO;QACT,4DAAM;;QApFE,0DAAuB;QAAvB,oFAAuB;QAWV,0DAAmK;QAAnK,qbAAmK;QA0BnK,2DAAmK;QAAnK,qbAAmK;QAcnK,0DAGyB;QAHzB,qZAGyB;QAU9B,0DAA4B;QAA5B,gFAA4B;QAOhC,0DAKC;QALD,sbAKC;;6FDpEA,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACQ;AAKgC;AACM;AACA;AACN;;;;;;;;;;;;;;;ICqBxE,0EACE;IAAA,6EAA6C;IAAjB,6TAAgB;IAAC,+DAAI;IAAA,4DAAS;IAC5D,4DAAM;;;;IACN,0EACE;IAAA,6EAA0C;IAAjB,6TAAgB;IAAC,+DAAI;IAAA,4DAAS;IACzD,4DAAM;;;;IAEN,0EACE;IAAA,6EAAiD;IAAzB,oUAAuB;IAAE,iEAAK;IAAA,4DAAS;IACnE,4DAAM;;ADxBP,MAAM,6BAA6B;IAWxC,YACU,WAA2B,EAC3B,SAAsB,EACtB,MAAa;QAFb,gBAAW,GAAX,WAAW,CAAgB;QAC3B,cAAS,GAAT,SAAS,CAAa;QACtB,WAAM,GAAN,MAAM,CAAO;QARvB,aAAQ,GAAG,IAAI,CAAC;QAChB,aAAQ,GAAG,KAAK,CAAC;QACjB,iBAAY,GAAG,KAAK,CAAC;QACrB,WAAM,GAAG,KAAK,CAAC;IAMX,CAAC;IAEP,QAAQ;QACN,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC5D,IAAI,CAAC,IAAI,CAAC,EAAE;oBACV,OAAO;iBACR;qBAAM;oBACL,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBACxD,2CAA2C;iBAC5C;aACF;SACF;IACH,CAAC;IAGD,aAAa,CAAC,YAAY;QACxB,QAAQ,YAAY,EAAE;YACpB,KAAK,CAAC;gBACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,MAAM;YACR,KAAK,CAAC,CAAC;YACP,KAAK,CAAC;gBACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,MAAM;YACR,KAAK,CAAC;gBACJ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;gBACrB,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;IAED,QAAQ,CAAC,UAAU,EAAE,SAAS;QAC5B,iHAAiH;QACjH,gDAAgD;QAChD,QAAQ,SAAS,EAAE;YACjB,KAAK,GAAG;gBACN,yCAAyC;gBACzC,IAAI,OAAO,GAAQ,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC;gBACvC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAC,UAAU,CAAC;gBACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE;oBACrD,iEAAiE;oBACjE,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,OAAO,CAAC;oBACtC,8DAA8D;oBAC9D,+BAA+B;iBAChC;gBACD,wBAAwB;gBACtB,qBAAqB;gBACnB,0DAA0D;gBAC5D,WAAW;gBACT,SAAS;gBACX,IAAI;gBACN,IAAI;gBACJ,wBAAwB;gBACxB,4DAA4D;gBAC5D,IAAI;gBAEJ,IAAG,UAAU,IAAI,CAAC;uBACf,UAAU,IAAI,CAAC;uBACf,UAAU,IAAI,CAAC;uBACf,UAAU,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,UAAU,EAClE;oBACA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC3B;qBAAM;oBACL,IAAI,CAAC,YAAY,GAAG,IAAI;iBACzB;gBACD,IACE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE;;wBAElC,UAAU,IAAI,CAAC,EAAE;oBACf,IAAI,CAAC,YAAY,GAAG,IAAI;iBACzB;qBAAM;oBACL,IAAI,CAAC,YAAY,GAAG,KAAK;iBAC1B;gBACD,MAAM;YACR,KAAK,GAAG;gBACN,yCAAyC;gBACzC,IAAI,OAAO,GAAO,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC;gBACtC,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,OAAO,CAAC;gBACtC,IAAG,UAAU,IAAI,CAAC;uBACb,UAAU,IAAI,CAAC;uBACf,UAAU,IAAI,CAAC;uBACf,UAAU,IAAI,CAAC,EAAE;oBAClB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC3B;qBAAM;oBACL,IAAI,CAAC,YAAY,GAAG,IAAI;iBACzB;gBACH,IACI,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,UAAU,CAAC;;wBAEhD,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,UAAU,CAAE,EAAE;oBACnD,IAAI,CAAC,YAAY,GAAG,KAAK;iBAC1B;qBAAM;oBACL,IAAI,CAAC,YAAY,GAAG,IAAI;iBACzB;gBACH,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;IAED,IAAI;QACF,QAAQ,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;YACnC,KAAK,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBACzD,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM;YACR,KAAK,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBACzD,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM;YACR,KAAK,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBACzD,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM;YACR,UAAU;YACV,8DAA8D;YAC9D,2BAA2B;YAC3B,2BAA2B;YAC3B,WAAW;YACX;gBACE,MAAM;SACT;IACH,CAAC;IAED,IAAI;QACF,QAAQ,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;YACnC,KAAK,CAAC;gBACJ,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,IAAI,UAAU,EAAE;oBACpD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;iBACjD;qBAAM;oBACL,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;oBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACtB,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC;oBACzE,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC;oBAC5E,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC;oBACnE,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;iBACvE;gBACD,MAAM;YACR,KAAK,CAAC;gBACJ,IAAI,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,UAAU,EAAE;oBAClD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;iBAC7C;qBAAM;oBACL,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;oBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACtB,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;oBAClE,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;oBAClE,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;oBAClE,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC;oBAC9D,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC;iBAClE;gBACD,MAAM;YACR,KAAK,CAAC;gBACJ,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,IAAI,UAAU,EAAE;oBACpD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;iBACjD;qBAAM;oBACL,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;oBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACtB,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;oBACvE,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,oBAAoB,CAAC;oBAClF,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC;oBAC1E,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC;iBAC7E;gBACD,qEAAqE;gBACrE,yDAAyD;gBACzD,WAAW;gBACX,2BAA2B;gBAC3B,2BAA2B;gBAC3B,IAAI;gBACJ,MAAM;YACR,KAAK,CAAC;gBACJ,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;IAID,WAAW;QACT,QAAQ;QACR,IAAG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAC;YACjE,IAAI,QAAQ,GAAG;gBACb,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,WAAW;gBACtD,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,cAAc;gBAC5D,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,GAAG;gBACtC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK;gBAC1C,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ;gBAChD,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK;gBAC1C,eAAe,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,aAAa;gBAC1D,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,WAAW;gBACtD,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ;gBAC9C,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ;gBAC9C,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ;gBAC9C,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,IAAI;gBACtC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,OAAO;gBAC5C,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,SAAS;gBAClD,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ;gBAChD,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,YAAY;gBACxD,sBAAsB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,oBAAoB;gBACxE,oBAAoB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,kBAAkB;gBACpE,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,cAAc;gBAC5D,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK;gBAC1C,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ;gBAC9C,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ;gBAC9C,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,eAAe;aAC7D,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;YACjC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,SAAS,CACnD,CAAC,GAAG,EAAE,EAAE;gBACN,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,GAAG,CAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,yBAAyB,CAAC;gBAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YACpC,CAAC,EAAE,CAAC,GAAqB,EAAE,EAAE;gBAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;YACzC,CAAC,CACF;SACF;IACH,CAAC;;0GArPY,6BAA6B;6GAA7B,6BAA6B;;kEAE7B,kGAAoB;kEACpB,kGAAoB;kEACpB,4FAAkB;kEAClB,4FAAkB;;;;;;;;;QCpBvB,yEACI;QAAA,yEACI;QAAA,uEACI;QAAA,kEAAiC;QACrC,4DAAI;QACJ,qEAAI;QAAA,sFAA2B;QAAA,4DAAK;QACxC,4DAAM;QAEN,uEAAM;QAAA,oGAAyC;QAAA,4DAAO;QAC1D,4DAAM;QAEN,6EACE;QAAA,sFACE;QADuB,0LAAqB,yBAAqB,IAAC;QAClE,8EACI;QAAA,+EAAqC;QACzC,4DAAU;QAEV,8EACI;QAAA,6EAAiC;QACrC,4DAAU;QAEV,8EACE;QAAA,+EAAqC;QACvC,4DAAU;QAEV,+EACE;QAAA,6EAAiC;QACnC,4DAAU;QACZ,4DAAgB;QAClB,4DAAU;QACR,4HACE;QAEF,4HACE;QAGF,4HACE;;QAzB8B,2DAAoB;QAApB,iFAAoB;QAItB,0DAAoB;QAApB,iFAAoB;QAIlB,0DAAoB;QAApB,iFAAoB;QAItB,0DAAoB;QAApB,iFAAoB;QAKtB,0DAAgB;QAAhB,8EAAgB;QAGhB,0DAAgB;QAAhB,8EAAgB;QAIhB,0DAAoB;QAApB,kFAAoB;;6FDtB7C,6BAA6B;cALzC,uDAAS;eAAC;gBACT,QAAQ,EAAE,4BAA4B;gBACtC,WAAW,EAAE,yCAAyC;gBACtD,SAAS,EAAE,CAAC,oBAAoB,CAAC;aAClC;;kBAEE,uDAAS;mBAAC,UAAU,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;;kBACrC,uDAAS;mBAAC,kGAAoB;;kBAC9B,uDAAS;mBAAC,kGAAoB;;kBAC9B,uDAAS;mBAAC,4FAAkB;;kBAC5B,uDAAS;mBAAC,4FAAkB;;;;;;;;;;;;;;AErB/B;AAAA;AAAA;AAAA;AAAkD;;;;;;AAO3C,MAAM,2BAA2B;IAEtC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;sGALU,2BAA2B;2GAA3B,2BAA2B;QCPxC,yEACE;QAAA,qEAAI;QAAA,mEAAQ;QAAA,4DAAK;QACjB,oEAAG;QAAA,oGAAyC;QAAA,4DAAI;QAClD,4DAAM;QAEN,yEACE;QAAA,uEACE;QAAA,oEACA;QAAA,qEAAI;QAAA,sEAAW;QAAA,4DAAK;QACtB,4DAAI;QACJ,wEACE;QAAA,qEACA;QAAA,sEAAI;QAAA,6EAAiB;QAAA,4DAAK;QAC5B,4DAAI;QACN,4DAAM;QAGJ,0EACE;QACA,sEAAI;QAAA,2FAA+B;QAAA,wEAA8B;QAAA,iEAAK;QAAA,4DAAI;QAAA,4DAAK;QACjF,4DAAM;;QAdkC,0DAAkC;QAAlC,6IAAkC;QAI1C,0DAAqC;QAArC,6IAAqC;QAS7B,0DAAyB;QAAzB,6IAAyB;;6FDZtD,2BAA2B;cALvC,uDAAS;eAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,WAAW,EAAE,uCAAuC;gBACpD,SAAS,EAAE,CAAC,oBAAoB,CAAC;aAClC;;;;;;;;;;;;;;AELD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACiD;AAI1B;AAClB;AACE;AACe;;;;;;;;;;;;ICY9D,gFAGE;IAAA,mFACF;IAAA,4DAAY;;;IAWZ,gFACE;IAAA,kFACF;IAAA,4DAAY;;;IAOV,gFACE;IAAA,iFACJ;IAAA,4DAAY;;;IAWN,4EAGE;IAAA,8EACF;IAAA,4DAAY;;;IACZ,4EAGA;IAAA,6EACA;IAAA,4DAAY;;;IAMhB,4EAOE;IAAA,yJACF;IAAA,4DAAY;;;IAEZ,4EAQE;IAAA,iFACF;IAAA,4DAAY;;;IAcV,uEACE;IAAA,wGACF;IAAA,4DAAO;;;IACP,uEACE;IAAA,yFACF;IAAA,4DAAO;;;IAbT,4EAQE;IAAA,uIACE;IAEF,uIACE;IAEN,4DAAY;;;IANF,0DAA8D;IAA9D,sLAA8D;IAG9D,0DAA6D;IAA7D,qLAA6D;;;IAarE,4EAGA;IAAA,qFACA;IAAA,4DAAY;;AD7GjB,MAAM,2BAA2B;IAUtC,YACU,cAA8B,EAC9B,SAAuB,EACvB,MAAc,EACd,EAAe;QAHf,mBAAc,GAAd,cAAc,CAAgB;QAC9B,cAAS,GAAT,SAAS,CAAc;QACvB,WAAM,GAAN,MAAM,CAAQ;QACd,OAAE,GAAF,EAAE,CAAa;IACrB,CAAC;IAZL,IAAI,YAAY,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAC,CAAC;IACzD,IAAI,aAAa,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,EAAC,CAAC;IAC3D,IAAI,YAAY,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAC,CAAC;IACzD,IAAI,gBAAgB,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,EAAC,CAAC;IACjE,IAAI,SAAS,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAC,CAAC;IACnD,IAAI,YAAY,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAC,CAAC;IACzD,IAAI,mBAAmB,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAC,CAAC;IAQvE,QAAQ;QACN,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IACD,oBAAoB;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CACzB;YACE,QAAQ,EAAE;gBACR,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;oBACxB,IAAI,CAAC,qBAAqB;iBAC3B;aACF;YACD,SAAS,EAAE;gBACT,EAAE;gBACF,CAAC,yDAAU,CAAC,QAAQ;oBACpB,IAAI,CAAC,qBAAqB;iBACzB;aACF;YACD,QAAQ,EAAE;gBACR,EAAE;gBACF,CAAC,yDAAU,CAAC,QAAQ;oBACpB,IAAI,CAAC,qBAAqB;iBACzB;aACF;YACD,YAAY,EAAE;gBACZ,EAAE;gBACF,CAAC,yDAAU,CAAC,QAAQ;oBACpB,IAAI,CAAC,qBAAqB;iBACzB;aACF;YACD,KAAK,EAAE;gBACL,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,KAAK;oBAChB,IAAI,CAAC,qBAAqB;iBAC3B;aACF;YACD,QAAQ,EAAE;gBACR,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,OAAO,CAAC,wEAAwE,CAAC;oBAC5F,IAAI,CAAC,qBAAqB;iBAC3B;aACF;YAED,eAAe,EAAE;gBACf,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,IAAI,CAAC,qBAAqB;iBAC3B;aACF;SACF,EACD,EAAE,SAAS,EAAE,8FAAS,CAAC,UAAU,EAAC,iBAAiB,CAAC,EAAE,CACvD;IACH,CAAC;IAIM,sBAAsB,CAAC,OAAwB;QACpD,YAAY;QACZ,MAAM,QAAQ,GAAW,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,8CAA8C;QACtG,MAAM,eAAe,GAAW,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC,qDAAqD;QAC3H,+BAA+B;QAC/B,IAAI,QAAQ,KAAK,eAAe,EAAE;YAChC,wEAAwE;YACxE,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC;YACrE,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;SACpD;IACH,CAAC;IAED;;;;;;OAMG;IAEI,qBAAqB,CAAC,OAAoB;QAC/C,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;YAC/D,MAAM,OAAO,GAAG,CAAC,YAAY,CAAC;YAC9B,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;SAC9C;IACH,CAAC;IAED,QAAQ,CAAC,MAAM;QACb,QAAQ;QACR,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,2CAA2C,CAAC;SACzE;QACD,IAAI,WAAW,GAAyB,IAAI,4DAAoB,EAAE;QAElE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;QAExB,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK;QACnC,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK;QACrC,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;QAC3C,WAAW,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe;QACzD,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS;QAC7C,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;QAC3C,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;QAC3C,WAAW,CAAC,QAAQ,GAAG,8DAAQ,CAAC,KAAK;QACrC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,SAAS,CACjD,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,yBAAyB,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,EAAE,CAAC,GAAsB,EAAE,EAAE;YAC5B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;QACzC,CAAC,CACF;IAEH,CAAC;;sGAzIU,2BAA2B;2GAA3B,2BAA2B,yHAF3B,CAAC,6EAAc,CAAC;QCf7B,yEACE;QAAA,yEACE;QAAA,uEACE;QAAA,kEAAiC;QACnC,4DAAI;QACJ,qEAAI;QAAA,kFAAuB;QAAA,4DAAK;QAClC,4DAAM;QACJ,uEAAM;QAAA,oGAAyC;QAAA,4DAAO;QAC1D,4DAAM;QACN,yEACI;QAAA,0EACI;QADuB,uJAAY,wBAAgB,IAAC;QACpD,qFACE;QAAA,6EAAW;QAAA,sEAAU;QAAA,4DAAY;QACjC,uEAQA;QAAA,qIAGE;QAEJ,4DAAiB;QAEjB,qFACE;QAAA,6EAAW;QAAA,qEAAS;QAAA,4DAAY;QAChC,uEAMA;QAAA,qIACE;QAEJ,4DAAiB;QAEjB,qFACE;QAAA,6EAAW;QAAA,qEAAS;QAAA,4DAAY;QAChC,wEAEE;QAAA,qIACE;QAEN,4DAAiB;QAEjB,qFACE;QAAA,6EAAW;QAAA,iEAAK;QAAA,4DAAY;QAC5B,wEAIE;QAEI,sIAGE;QAEF,sIAGA;QAEN,4DAAiB;QAEjB,sFACE;QAAA,6EAAW;QAAA,oEAAQ;QAAA,4DAAY;QAC/B,wEACA;QAAA,sIAOE;QAGF,sIAQE;QAEJ,4DAAiB;QAEjB,qFACE;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACzC,wEACE;QAAA,sIAQE;QAOJ,4DAAiB;QAEjB,qFACE;QAAA,6EAAW;QAAA,yEAAa;QAAA,4DAAY;QACpC,wEAKA;QAAA,sIAGA;QAOF,4DAAiB;QAGnB,2EACE;QAAA,8EAAwC;QAAA,oEAAQ;QAAA,4DAAS;QACzD,sEAAI;QAAA,2FACA;QAAA,yEAAwB;QAAA,iEAAK;QAAA,4DAAI;QACrC,4DAAK;QACP,4DAAM;QAEV,4DAAO;QACX,4DAAM;;QArII,0DAAoB;QAApB,iFAAoB;QAapB,0DAAqE;QAArE,wIAAqE;QAa1D,0DAAkE;QAAlE,sIAAkE;QAShE,0DAAmE;QAAnE,sIAAmE;QAa/D,0DAEe;QAFf,iKAEe;QAGf,0DAEY;QAFZ,8JAEY;QAS3B,0DAKG;QALH,qaAKG;QAKD,0DAKG;QALH,saAKG;QAUH,0DAKC;QALD,gXAKC;QAkBQ,0DAEsB;QAFtB,sLAEsB;;6FD3GhC,2BAA2B;cANvC,uDAAS;eAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,WAAW,EAAE,uCAAuC;gBACpD,SAAS,EAAE,CAAC,oBAAoB,CAAC;gBACjC,SAAS,EAAE,CAAC,6EAAc,CAAC;aAC5B;;;;;;;;;;;;;;AEhBD;AAAA;AAAO,MAAM,mBAAmB;CAG/B;;;;;;;;;;;;;ACHD;AAAA;AAAO,MAAM,qBAAqB;CAEjC;;;;;;;;;;;;;ACFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACV;AACG;AACM;AACD;AACI;AACjB;AACD;;;;;;;;;;;;;ACP/B;AAAA;AAAO,MAAM,YAAY;CAGxB;;;;;;;;;;;;;ACHD;AAAA;AAAO,MAAM,4BAA4B;CA0BxC;;;;;;;;;;;;;AC1BD;AAAA;AAAO,MAAM,oBAAoB;CAQhC;;;;;;;;;;;;;ACRD;AAAA;AAAO,MAAM,oBAAoB;CAKhC;;;;;;;;;;;;;ACLD;AAAA;AAAO,MAAM,QAAQ;CAOpB;;;;;;;;;;;;;ACPD;AAAA;AAAA,IAAY,QAGX;AAHD,WAAY,QAAQ;IAClB,2BAAe;IACf,iCAAqB;AACvB,CAAC,EAHW,QAAQ,KAAR,QAAQ,QAGnB;;;;;;;;;;;;;ACAD;AAAA;AAAA,kDAAkD;AAC3C,SAAS,SAAS,CAAC,WAAmB,EAAE,mBAA2B;IACxE,OAAO,CAAC,SAAoB,EAAE,EAAE;QAC5B,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAChD,MAAM,eAAe,GAAG,SAAS,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QAEhE,IAAI,eAAe,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE;YAC7D,gFAAgF;YAChF,OAAO;SACV;QAED,mDAAmD;QACnD,IAAI,OAAO,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,EAAE;YACzC,eAAe,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;SAClD;aAAM;YACH,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACnC;IACL,CAAC;AACH,CAAC","file":"modules-auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ConfirmEmailComponent, LoginComponent, RegisterBusinessUserComponent, RegisterEntryPointComponent, RegisterNormalUserComponent } from './components';\r\nimport { AuthLayoutComponent } from './components/auth-layout/auth-layout.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    component : AuthLayoutComponent,\r\n    children : [\r\n      { path:\"register\", children : [\r\n          { path:\"\", component:RegisterEntryPointComponent },\r\n          { path:\"basic\", component:RegisterNormalUserComponent },\r\n          { path:\"business\", component:RegisterBusinessUserComponent },\r\n        ]\r\n      },\r\n      { path:\"login\", component:LoginComponent },\r\n      { path:\"confirm-email\", component:ConfirmEmailComponent },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n\r\n\r\n","import { NgModule, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { ForgetPasswordComponent, LoginComponent, NewPasswordComponent, RegisterBusinessUserComponent, RegisterEntryPointComponent, RegisterNormalUserComponent } from './components';\r\nimport { FormsDependenciesModule } from 'src/app/forms-dependencies/forms-dependencies.module';\r\nimport { AuthApiService } from './services/api/auth-api.service';\r\nimport { SharedModule } from './../../shared/shared.module';\r\n\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/Input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\nimport { CompanyInfoComponent } from './components/register/_controls/company-info/company-info.component';\r\nimport { StoreInfoComponent } from './components/register/_controls/store-info/store-info.component';\r\nimport { ContactInfoComponent } from './components/register/_controls/contact-info/contact-info.component';\r\nimport { BasicInfoComponent } from './components/register/_controls/basic-info/basic-info.component';\r\nimport { ConfirmEmailComponent } from './components/confirm-email/confirm-email.component';\r\nimport { AuthLayoutComponent } from './components/auth-layout/auth-layout.component';\r\nimport { ComparePasswordModule } from './components/register/_controls/basic-info/ComparePassword.Module';\r\n\r\n// ghareebovich@gmail.com\r\n// P@$$W0rd\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterBusinessUserComponent,\r\n    RegisterNormalUserComponent,\r\n    ForgetPasswordComponent,\r\n    NewPasswordComponent,\r\n    RegisterEntryPointComponent,\r\n    // confirmEquelValidator,\r\n    CompanyInfoComponent,\r\n    StoreInfoComponent,\r\n    ContactInfoComponent,\r\n    BasicInfoComponent,\r\n    ConfirmEmailComponent,\r\n    AuthLayoutComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    FormsDependenciesModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    ComparePasswordModule\r\n  ],\r\n  exports: [\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n  ],\r\n  providers: [\r\n    AuthApiService\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'auth-layout',\r\n  templateUrl: './auth-layout.component.html',\r\n  styleUrls: ['./auth-layout.component.scss','../register/auth.style.scss']\r\n})\r\nexport class AuthLayoutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<section class=\"App_Loign\">\r\n  <div class=\"container\">\r\n\r\n    <div class=\"auth_header_logo\">\r\n      <div class=\"auth_logo\">\r\n        <img src=\"assets/images/SVG/Logo-Orange.svg\" alt=\"\">\r\n      </div>\r\n\r\n      <button>\r\n\r\n          <a [routerLink]=\"['/']\">\r\n            <i class=\"fas fa-times\">\r\n            </i>\r\n          </a>\r\n      </button>\r\n    </div>\r\n\r\n      <router-outlet></router-outlet>\r\n      <div class=\"auth_img\">\r\n          <img src=\"../../../../assets/images/Login_bg.jpg\" alt=\"\">\r\n      </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertService, AuthService } from 'src/app/core/services';\r\nimport { ConfirmEmailRequest } from '../../models';\r\nimport { AuthApiService } from '../../services/api/auth-api.service';\r\n\r\n@Component({\r\n  selector: 'app-confirm-email',\r\n  templateUrl: './confirm-email.component.html',\r\n  styleUrls: ['./confirm-email.component.scss']\r\n})\r\nexport class ConfirmEmailComponent implements OnInit {\r\n\r\n\r\n  constructor(\r\n    private activatedRoute:ActivatedRoute,\r\n    private router:Router,\r\n    private alertSrvc:AlertService,\r\n    private authApiSrvc : AuthApiService,\r\n    private authSrvc : AuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe((params)=> {\r\n        let confirmEmailRequest = new ConfirmEmailRequest()\r\n        confirmEmailRequest.code = params.code\r\n        confirmEmailRequest.userId = params.userId\r\n        if(confirmEmailRequest.code && confirmEmailRequest.userId) {\r\n          this.authApiSrvc.confirmEmail(confirmEmailRequest)\r\n          .subscribe(\r\n            (res)=>{\r\n              this.alertSrvc.success('Email confirmed successfully');\r\n              this.router.navigate(['/']);\r\n            },\r\n\r\n          )\r\n        }\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.scss']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>forget-password works!</p>\r\n","export * from './forget-password/forget-password.component'\r\nexport * from './login/login.component'\r\nexport * from './new-password/new-password.component'\r\nexport * from './register/register-business-user/register-business-user.component'\r\nexport * from './register/register-entry-point/register-entry-point.component'\r\nexport * from './register/register-normal-user/register-normal-user.component'\r\nexport * from './confirm-email/confirm-email.component'\r\n\r\n\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService, AuthService } from 'src/app/core/services';\r\nimport {LoginRequest  } from '../../models/login-request.model';\r\nimport {AuthApiService} from '../../services/api/auth-api.service' ;\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  providers:[AuthApiService]\r\n\r\n})\r\nexport class LoginComponent implements OnInit {\r\nerrorMsg= '';\r\n constructor(\r\n   private  _AuthApiService:AuthApiService,\r\n   private  alertSrvc:AlertService,\r\n   private  authSrvc:AuthService,\r\n   private router : Router\r\n   ) { }\r\n ngOnInit(): void { }\r\n\r\n get emailCtrl():AbstractControl { return this.myform.get('email') }\r\n get passwordCtrl():AbstractControl { return this.myform.get('password') }\r\n\r\n  myform:FormGroup = new FormGroup({\r\n    'email':new FormControl (null,[Validators.required,Validators.email]),\r\n    'password':new FormControl (null,[Validators.required ,Validators.minLength(6)]),\r\n    'rememberMe':new FormControl (null)\r\n  })\r\n\r\n  login(mydata){\r\n    if(this.myform.invalid) {\r\n      this.myform.markAllAsTouched()\r\n      return this.alertSrvc.error('Complete all the fields')\r\n    }\r\n    let requestBody : LoginRequest = new LoginRequest ();\r\n    console.log (requestBody)\r\n    let myformValue = this.myform.value\r\n    requestBody.email = myformValue.email\r\n    requestBody.password = myformValue.password\r\n    this._AuthApiService.login(requestBody).subscribe(\r\n      (res)=>{\r\n        this.alertSrvc.success('Logged In successfully')\r\n        this.authSrvc.saveUserData(res.data)\r\n        this.router.navigate(['/'])\r\n      },(err:HttpErrorResponse)=>{\r\n        this.alertSrvc.error(err.error.Message)\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  navigateToRegister(){\r\n    this.router.navigate(['/register'])\r\n  }\r\n\r\n}\r\n","\r\n\r\n<div class=\"auth_heading\">\r\n  <h2>login</h2>\r\n  <p>Please fill in the form below to Login</p>\r\n\r\n</div>\r\n<div class=\"input_form\">\r\n  <form [formGroup]=\"myform\" (ngSubmit)=\"login(myform)\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Email Address</mat-label>\r\n      <input type=\"email\" matInput formControlName=\"email\" id=\"email\" aria-describedby=\"email\">\r\n      <mat-error *ngIf=\"emailCtrl.invalid == true\r\n       && emailCtrl.touched == true\r\n      && emailCtrl.errors.required \">\r\n        Email is required\r\n      </mat-error>\r\n      <mat-error *ngIf=\"emailCtrl.invalid == true\r\n       && emailCtrl.touched == true\r\n      && emailCtrl.errors.email\">\r\n      Email is Invalid\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput type=\"password\" formControlName=\"password\"  id=\"Password\">\r\n      <!-- <mat-error *ngIf=\"\r\n      passwordCtrl.invalid == true && passwordCtrl.touched == true\r\n      && passwordCtrl.errors.required\">\r\n        password is required\r\n      </mat-error> -->\r\n      <mat-error\r\n        *ngIf=\"\r\n          myform.controls.password?.invalid &&\r\n          myform.controls.password?.errors &&\r\n            (myform.controls.password?.dirty ||\r\n            myform.controls.password?.touched)\r\n          \"\r\n      >\r\n    Password Is Required\r\n  </mat-error>\r\n    </mat-form-field>\r\n    <span *ngIf=\"errorMsg\" class=\"text-danger\" role=\"alert\">\r\n      {{errorMsg}}\r\n    </span>\r\n    <!-- <p class=\"text-danger\"> {{errorMsg}}</p> -->\r\n\r\n\r\n      <div class=\"form-group form-check\">\r\n          <mat-checkbox type=\"checkbox\" formControlName=\"rememberMe\" id=\"rememberMe\">\r\n            Remember Me\r\n          </mat-checkbox>\r\n      </div>\r\n\r\n      <div class=\"Btn_action\">\r\n        <button mat-flat-button color=\"primary\">login</button>\r\n        <button mat-stroked-button color=\"primary\" (click)='navigateToRegister()'>register</button>\r\n      </div>\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-new-password',\r\n  templateUrl: './new-password.component.html',\r\n  styleUrls: ['./new-password.component.scss']\r\n})\r\nexport class NewPasswordComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>new-password works!</p>\r\n","import { NgModule } from '@angular/core';\r\n\r\n// Directive  \r\nimport { CompareDirective } from './confirm-equal-validator.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CompareDirective\r\n  ],\r\n  exports: [\r\n    CompareDirective\r\n  ]\r\n})\r\nexport class ComparePasswordModule { } ","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { from } from 'rxjs';\r\nimport { MustMatch } from 'src/app/shared/validations/custom-validation';\r\n\r\n@Component({\r\n  selector: 'app-basic-info',\r\n  templateUrl: './basic-info.component.html',\r\n  styleUrls: ['./basic-info.component.scss']\r\n})\r\nexport class BasicInfoComponent implements OnInit {\r\n  basicForm: FormGroup;\r\n  // get confirmPasswordCtrl () { return this.basicForm.get('confirmPassword') } ;\r\n\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createBasicForm();\r\n\r\n  }\r\n  createBasicForm() {\r\n    this.basicForm = this.fb.group({\r\n      userName: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', {\r\n        updateOn: 'change',\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(6),\r\n          Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?{}()&])[A-Za-z\\d@$!%*#?{}()&]{8,}$/),\r\n        ]\r\n      }),\r\n      confirmPassword: new FormControl('', {\r\n        updateOn: 'change',\r\n        validators: [Validators.required],\r\n      }),\r\n    },\r\n      { validator: MustMatch('password','confirmPassword') }\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  /* Function Name : noWhitespaceValidator\r\n   * Author :\r\n   * Created Date : 10-01-2019\r\n   * Modified Date : *\r\n   * Purpose : to validate whitespace of  text field\r\n   * PARAMS : control\r\n   */\r\n\r\n  public noWhitespaceValidator(control: FormControl) {\r\n    if (control.value) {\r\n      const isWhitespace = (control.value || \"\").trim().length === 0;\r\n      const isValid = !isWhitespace;\r\n      return isValid ? null : { whitespace: true };\r\n    }\r\n  }\r\n\r\n  /* Function Name : saveData\r\n  * Author :\r\n  * Created Date :\r\n  * Modified Date : *\r\n  * Purpose : Object That Send To The Parent To Save It\r\n  * PARAMS :\r\n  */\r\n  saveData() {\r\n    const saveStoreData = {\r\n      userName: this.basicForm.controls.userName.value,\r\n      password: this.basicForm.controls.password.value,\r\n      confirmPassword: this.basicForm.controls.confirmPassword.value,\r\n    }\r\n    return saveStoreData;\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    console.log('hi')\r\n    if (this.basicForm.valid) {\r\n      return this.basicForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"basicForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * userName </mat-label>\r\n          <input type=\"text\" matInput name=\"userName\" formControlName=\"userName\">\r\n          <mat-error\r\n            *ngIf=\"basicForm.controls.userName?.invalid && basicForm.controls.userName?.errors && (basicForm.controls.userName?.dirty || basicForm.controls.userName?.touched)\">\r\n            userName is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-bottom: 10px;\">\r\n          <mat-label> * password </mat-label>\r\n          <input type=\"password\" matInput name=\"password\" formControlName=\"password\" #password>\r\n          <mat-error *ngIf=\"basicForm.controls['password']['errors']?.pattern\">\r\n            At least 8 characters, 1 number, 1 uppercase letter, 1 lowercase letter, 1 special character\r\n          </mat-error>\r\n\r\n          <mat-error *ngIf=\"basicForm.controls['password']['errors']?.required && basicForm.get('password').touched\">\r\n            Password Is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * confirmPassword </mat-label>\r\n          <input type=\"password\" matInput name=\"confirmPassword\" formControlName=\"confirmPassword\" >\r\n\r\n          <mat-error\r\n              *ngIf=\"\r\n              basicForm.controls.confirmPassword?.invalid\r\n              &&\r\n                (basicForm.controls.confirmPassword?.dirty ||\r\n                basicForm.controls.confirmPassword?.touched)\r\n              \"\r\n            >\r\n              <span *ngIf=\"basicForm.controls.confirmPassword?.hasError('mustMatch')\">\r\n                Password & Confirm Password does not match.\r\n              </span>\r\n              <span *ngIf=\"basicForm.controls.confirmPassword?.hasError('required')\">\r\n                confirm password is required\r\n              </span>\r\n          </mat-error>\r\n\r\n        </mat-form-field>\r\n      </div>\r\n\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Attribute, Directive, Input } from '@angular/core';\r\nimport { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\r\nimport { Key } from 'protractor';\r\n\r\n@Directive(\r\n    {\r\n        selector: '[appConfirmEqualValidators]',\r\n        providers: [{ provide: NG_VALIDATORS, useExisting: CompareDirective, multi: true }]\r\n    }\r\n\r\n)\r\n\r\nexport class CompareDirective implements Validator {\r\n\r\n\r\n    @Input() appConfirmEqualValidators: string;\r\n    validate(control: AbstractControl): { [Key: string]: any } | null {\r\n        const controlToCompare = control.parent.get(this.appConfirmEqualValidators);\r\n        if (controlToCompare && controlToCompare.value !== control.value) {\r\n            return { notEqual: true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-company-info',\r\n  templateUrl: './company-info.component.html',\r\n  styleUrls: ['./company-info.component.scss']\r\n})\r\nexport class CompanyInfoComponent implements OnInit {\r\n  companyForm: FormGroup;\r\n  languages = [\r\n    { id: 1, name: 'English' },\r\n    { id: 2, name: 'French' },\r\n    { id: 3, name: 'German' },\r\n  ]\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createCompanyForm();\r\n  }\r\n\r\n\r\n  createCompanyForm() {\r\n    this.companyForm = this.fb.group({\r\n      companyName: new FormControl('', [Validators.required]),\r\n      commercialName: new FormControl('', [Validators.required]),\r\n      siret: new FormControl('', [Validators.required]),\r\n      ape: new FormControl('', [Validators.required]),\r\n      langauge: new FormControl('', [Validators.required]),\r\n      telefonNumber: new FormControl('', [Validators.required, Validators.pattern(/^[- +()]*[0-9][- +()0-9]*$/),]),\r\n      phoneNumber: new FormControl('',\r\n        [Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(18),\r\n        // Validators.pattern(/^(\\+\\d{1,3}[- ]?)?\\d{15}$/),\r\n        Validators.pattern(/^[- +()]*[0-9][- +()0-9]*$/),\r\n        this.noWhitespaceValidator,\r\n        ]),\r\n      // faxNumber:  new FormControl(''),\r\n      email: new FormControl('', { validators: [Validators.required, Validators.email] }),\r\n    });\r\n  }\r\n\r\n  /* Function Name : noWhitespaceValidator\r\n * Author :\r\n * Created Date : 10-01-2019\r\n * Modified Date : *\r\n * Purpose : to validate whitespace of  text field\r\n * PARAMS : control\r\n */\r\n\r\n  public noWhitespaceValidator(control: FormControl) {\r\n    if (control.value) {\r\n      const isWhitespace = (control.value || \"\").trim().length === 0;\r\n      const isValid = !isWhitespace;\r\n      return isValid ? null : { whitespace: true };\r\n    }\r\n  }\r\n\r\n  /* Function Name : saveData\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Object That Send To The Parent To Save It\r\n   * PARAMS :\r\n   */\r\n  saveData() {\r\n    const saveCompanyData = {\r\n      companyName: this.companyForm.controls.companyName.value,\r\n      commercialName: this.companyForm.controls.commercialName.value,\r\n      siret: this.companyForm.controls.siret.value,\r\n      ape: this.companyForm.controls.ape.value,\r\n      langauge: this.companyForm.controls.langauge.value,\r\n      telefonNumber: this.companyForm.controls.telefonNumber.value,\r\n      phoneNumber: this.companyForm.controls.phoneNumber.value,\r\n      // faxNumber: this.companyForm.controls.faxNumber.value ,\r\n      email: this.companyForm.controls.email.value,\r\n    }\r\n    return saveCompanyData;\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    if (this.companyForm.valid) {\r\n      return this.companyForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"companyForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Company Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"companyName\"\r\n          formControlName=\"companyName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.companyName?.invalid && companyForm.controls.companyName?.errors && (companyForm.controls.companyName?.dirty || companyForm.controls.companyName?.touched)\">\r\n            Company Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Commercial Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"commercialName\"\r\n          formControlName=\"commercialName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.commercialName?.invalid &&\r\n           companyForm.controls.commercialName?.errors &&\r\n            (companyForm.controls.commercialName?.dirty ||\r\n             companyForm.controls.commercialName?.touched)\">\r\n             Commercial Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Siret</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"siret\"\r\n          formControlName=\"siret\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.siret?.invalid &&\r\n           companyForm.controls.siret?.errors &&\r\n            (companyForm.controls.siret?.dirty ||\r\n             companyForm.controls.siret?.touched)\">\r\n             Siret is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Ape</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"ape\"\r\n          formControlName=\"ape\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.ape?.invalid &&\r\n           companyForm.controls.ape?.errors &&\r\n            (companyForm.controls.ape?.dirty ||\r\n             companyForm.controls.ape?.touched)\">\r\n             Ape is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"langauge\">\r\n            <mat-option value=\"\"> Choose Language </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let lang of languages\"\r\n                value=\"{{ lang.name }}\"\r\n            >\r\n            {{lang.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.langauge?.invalid &&\r\n              companyForm.controls.langauge?.errors.required &&\r\n              (companyForm.controls.langauge?.dirty ||\r\n                companyForm.controls.langauge?.touched)\r\n            \"\r\n          >\r\n            Language Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Email</mat-label>\r\n          <input\r\n          type=\"email\"\r\n          matInput\r\n          name=\"email\"\r\n          formControlName=\"email\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithCharsWithSpecial\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.email?.invalid &&\r\n           companyForm.controls.email?.errors.required &&\r\n            (companyForm.controls.email?.dirty ||\r\n             companyForm.controls.email?.touched)\">\r\n             Email is Required\r\n          </mat-error>\r\n          <mat-error *ngIf=\"companyForm.controls.email?.invalid &&\r\n          companyForm.controls.email?.errors.email &&\r\n            (companyForm.controls.email?.dirty || companyForm.controls.email?.touched)\">\r\n            Email Is Invalid\r\n        </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Telefon Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"telefonNumber\"\r\n          formControlName=\"telefonNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.telefonNumber?.invalid &&\r\n              companyForm.controls.telefonNumber?.errors.required &&\r\n              (companyForm.controls.telefonNumber?.dirty ||\r\n                companyForm.controls.telefonNumber?.touched)\r\n            \"\r\n          >\r\n            Telefon Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Phone Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"phoneNumber\"\r\n          formControlName=\"phoneNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.phoneNumber?.invalid &&\r\n              companyForm.controls.phoneNumber?.errors.required &&\r\n              (companyForm.controls.phoneNumber?.dirty ||\r\n                companyForm.controls.phoneNumber?.touched)\r\n            \"\r\n          >\r\n            Phone Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <!-- <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> Fax Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"faxNumber\"\r\n          formControlName=\"faxNumber\"\r\n          appNumberCharactrs\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.faxNumber?.invalid &&\r\n              companyForm.controls.faxNumber?.errors.required &&\r\n              (companyForm.controls.faxNumber?.dirty ||\r\n                companyForm.controls.faxNumber?.touched)\r\n            \"\r\n          >\r\n          Fax Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div> -->\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-contact-info',\r\n  templateUrl: './contact-info.component.html',\r\n  styleUrls: ['./contact-info.component.scss']\r\n})\r\nexport class ContactInfoComponent implements OnInit {\r\n  contactForm: FormGroup;\r\n  languages = [\r\n    {id: 1, name: 'English'},\r\n    {id: 2, name: 'French'},\r\n    {id: 3, name: 'German'},\r\n  ]\r\n  gender = [\r\n    {id: 1, name: 'Mr'},\r\n    {id: 2, name: 'Mrs'},\r\n  ]\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createContactForm();\r\n  }\r\n\r\n\r\n  createContactForm() {\r\n    this.contactForm = this.fb.group({\r\n      contactTelefonNumber: new FormControl('', [Validators.required]),\r\n      contactPhoneNumber:  new FormControl('', [Validators.required]),\r\n      contactFaxNumber:  new FormControl(''),\r\n      contactLanguge:  new FormControl('', [Validators.required]),\r\n      contactEmail:  new FormControl('', {validators : [Validators.required, Validators.email]}),\r\n      firstName:  new FormControl('', [Validators.required]),\r\n      lastName:  new FormControl('', [Validators.required]),\r\n      title:  new FormControl('', [Validators.required]),\r\n    });\r\n  }\r\n\r\n  addContactInfo(e) {\r\n\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    if(this.contactForm.valid) {\r\n      return this.contactForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n\r\n  /* Function Name : saveData\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Object That Send To The Parent To Save It\r\n   * PARAMS :\r\n   */\r\n  saveData() {\r\n    const saveContactData = {\r\n      contactTelefonNumber: this.contactForm.controls.contactTelefonNumber.value ,\r\n      contactPhoneNumber: this.contactForm.controls.contactPhoneNumber.value ,\r\n      contactFaxNumber: this.contactForm.controls.contactFaxNumber.value ,\r\n      contactLanguge: this.contactForm.controls.contactLanguge.value ,\r\n      contactEmail: this.contactForm.controls.contactEmail.value ,\r\n      firstName: this.contactForm.controls.firstName.value ,\r\n      lastName: this.contactForm.controls.lastName.value ,\r\n      title: this.contactForm.controls.title.value ,\r\n    }\r\n    return saveContactData;\r\n  }\r\n\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"contactForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"title\">\r\n            <mat-option value=\"\"> Choose Title </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let title of gender\"\r\n                value=\"{{ title.id }}\"\r\n            >\r\n            {{title.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.title?.invalid &&\r\n              contactForm.controls.title?.errors.required &&\r\n              (contactForm.controls.title?.dirty ||\r\n                contactForm.controls.title?.touched)\r\n            \"\r\n          >\r\n            Title Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * First Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"firstName\"\r\n          formControlName=\"firstName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"contactForm.controls.firstName?.invalid && contactForm.controls.firstName?.errors && (contactForm.controls.firstName?.dirty || contactForm.controls.firstName?.touched)\">\r\n            First Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Last Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"lastName\"\r\n          formControlName=\"lastName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"contactForm.controls.lastName?.invalid &&\r\n           contactForm.controls.lastName?.errors &&\r\n            (contactForm.controls.lastName?.dirty ||\r\n             contactForm.controls.lastName?.touched)\">\r\n             Last Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"contactLanguge\">\r\n            <mat-option value=\"\"> Choose Language </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let lang of languages\"\r\n                value=\"{{ lang.name }}\"\r\n            >\r\n            {{lang.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactLanguge?.invalid &&\r\n              contactForm.controls.contactLanguge?.errors.required &&\r\n              (contactForm.controls.contactLanguge?.dirty ||\r\n                contactForm.controls.contactLanguge?.touched)\r\n            \"\r\n          >\r\n          Contact Languge Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Email</mat-label>\r\n          <input\r\n          type=\"email\"\r\n          matInput\r\n          name=\"contactEmail\"\r\n          formControlName=\"contactEmail\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithCharsWithSpecial\"\r\n          >\r\n          <mat-error *ngIf=\"contactForm.controls.contactEmail?.invalid &&\r\n           contactForm.controls.contactEmail?.errors.required &&\r\n            (contactForm.controls.contactEmail?.dirty ||\r\n             contactForm.controls.contactEmail?.touched)\">\r\n             Contact Email is Required\r\n          </mat-error>\r\n          <mat-error *ngIf=\"contactForm.controls.contactEmail?.invalid &&\r\n          contactForm.controls.contactEmail?.errors.email &&\r\n            (contactForm.controls.contactEmail?.dirty || contactForm.controls.contactEmail?.touched)\">\r\n            Contact Email Is Invalid\r\n        </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Telefon Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"contactTelefonNumber\"\r\n          formControlName=\"contactTelefonNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactTelefonNumber?.invalid &&\r\n              contactForm.controls.contactTelefonNumber?.errors.required &&\r\n              (contactForm.controls.contactTelefonNumber?.dirty ||\r\n                contactForm.controls.contactTelefonNumber?.touched)\r\n            \"\r\n          >\r\n          Contact Telefon Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Phone Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"contactPhoneNumber\"\r\n          formControlName=\"contactPhoneNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactPhoneNumber?.invalid &&\r\n              contactForm.controls.contactPhoneNumber?.errors.required &&\r\n              (contactForm.controls.contactPhoneNumber?.dirty ||\r\n                contactForm.controls.contactPhoneNumber?.touched)\r\n            \"\r\n          >\r\n          Contact Phone Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <!-- <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> Fax Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"contactFaxNumber\"\r\n          formControlName=\"contactFaxNumber\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactFaxNumber?.invalid &&\r\n              contactForm.controls.contactFaxNumber?.errors.required &&\r\n              (contactForm.controls.contactFaxNumber?.dirty ||\r\n                contactForm.controls.contactFaxNumber?.touched)\r\n            \"\r\n          >\r\n          Contact Fax Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div> -->\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-store-info',\r\n  templateUrl: './store-info.component.html',\r\n  styleUrls: ['./store-info.component.scss']\r\n})\r\nexport class StoreInfoComponent implements OnInit {\r\n  StoreForm: FormGroup;\r\n  country = [\r\n    {id: 1, name: 'EN'},\r\n    {id: 2, name: 'FR'},\r\n    {id: 3, name: 'GR'},\r\n  ]\r\n\r\n  constructor( private fb: FormBuilder,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createStoreForm();\r\n\r\n  }\r\n\r\n\r\n  createStoreForm() {\r\n    this.StoreForm = this.fb.group({\r\n      address1: new FormControl('', [Validators.required]),\r\n      address2: new FormControl('', []),\r\n      postCode:  new FormControl('', [Validators.required]),\r\n      city:  new FormControl('', [Validators.required]),\r\n      country:  new FormControl('', [Validators.required]),\r\n\r\n    });\r\n  }\r\n\r\n\r\n  /* Function Name : saveData\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Object That Send To The Parent To Save It\r\n   * PARAMS :\r\n   */\r\n  saveData() {\r\n    const saveStoreData = {\r\n      address1: this.StoreForm.controls.address1.value ,\r\n      address2: this.StoreForm.controls.address2.value ,\r\n      postCode: this.StoreForm.controls.postCode.value ,\r\n      city: this.StoreForm.controls.city.value ,\r\n      country: this.StoreForm.controls.country.value ,\r\n\r\n    }\r\n    return saveStoreData;\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    if(this.StoreForm.valid) {\r\n      return this.StoreForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"StoreForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * address1  </mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"address1\"\r\n          formControlName=\"address1\"\r\n          >\r\n          <mat-error *ngIf=\"StoreForm.controls.address1?.invalid && StoreForm.controls.address1?.errors && (StoreForm.controls.address1?.dirty || StoreForm.controls.address1?.touched)\">\r\n            address1 is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> address2 </mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"address2\"\r\n          formControlName=\"address2\"\r\n          >\r\n\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * postCode  </mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"postCode\"\r\n          formControlName=\"postCode\"\r\n          >\r\n          <mat-error *ngIf=\"StoreForm.controls.postCode?.invalid && StoreForm.controls.postCode?.errors && (StoreForm.controls.postCode?.dirty || StoreForm.controls.postCode?.touched)\">\r\n            postCode is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * city</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"city\"\r\n          formControlName=\"city\"\r\n          >\r\n          <mat-error *ngIf=\"StoreForm.controls.city?.invalid &&\r\n          StoreForm.controls.city?.errors &&\r\n            (StoreForm.controls.city?.dirty ||\r\n            StoreForm.controls.city?.touched)\">\r\n            city is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"country\">\r\n            <mat-option value=\"\"> Choose country </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let lang of country\"\r\n                value=\"{{ lang.id }}\"\r\n            >\r\n            {{lang.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n            StoreForm.controls.country?.invalid &&\r\n            StoreForm.controls.country?.errors.required &&\r\n              (StoreForm.controls.country?.dirty ||\r\n              StoreForm.controls.country?.touched)\r\n            \"\r\n          >\r\n          country Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ViewChild } from '@angular/core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport{FormControl,FormGroup,Validators }from '@angular/forms'\r\nimport { Router } from '@angular/router';\r\nimport { AlertService } from 'src/app/core/services';\r\nimport { AuthApiService } from '../../../services/api/auth-api.service';\r\nimport { BasicInfoComponent } from '../_controls/basic-info/basic-info.component';\r\nimport { CompanyInfoComponent } from '../_controls/company-info/company-info.component';\r\nimport { ContactInfoComponent } from '../_controls/contact-info/contact-info.component';\r\nimport { StoreInfoComponent } from '../_controls/store-info/store-info.component';\r\n@Component({\r\n  selector: 'app-register-business-user',\r\n  templateUrl: './register-business-user.component.html',\r\n  styleUrls: ['../auth.style.scss']\r\n})\r\nexport class RegisterBusinessUserComponent implements OnInit {\r\n  @ViewChild('tabgroup', {static: false}) tabgroup;\r\n  @ViewChild(ContactInfoComponent) contactInfo: ContactInfoComponent;\r\n  @ViewChild(CompanyInfoComponent) companyInfo: CompanyInfoComponent;\r\n  @ViewChild(StoreInfoComponent) storeInfo: StoreInfoComponent;\r\n  @ViewChild(BasicInfoComponent) basicInfo: BasicInfoComponent;\r\n  showNext = true;\r\n  showPrev = false;\r\n  showSaveNext = false;\r\n  active = false;\r\n\r\n  constructor(\r\n    private authService: AuthApiService,\r\n    private alertSrvc:AlertService,\r\n    private router:Router\r\n  ) { }\r\n\r\nngOnInit(): void {\r\n  this.checkPrevNext(0);\r\n  if (this.tabgroup) {\r\n    for (let i = 1; i < this.tabgroup._tabs._results.length; i++) {\r\n      if (i <= 6) {\r\n        return;\r\n      } else {\r\n        this.active = this.tabgroup._tabs._results[i]._disabled;\r\n        // console.log('this.active', this.active);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncheckPrevNext(currentIndex) {\r\n  switch (currentIndex) {\r\n    case 0:\r\n      this.showNext = true;\r\n      this.showPrev = false;\r\n      break;\r\n    case 1:\r\n    case 2:\r\n      this.showNext = true;\r\n      this.showPrev = true;\r\n      break;\r\n    case 3:\r\n      this.showNext = false;\r\n      this.showPrev = true;\r\n      this.checkTab(3, 'n')\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\ncheckTab(currentTab, clickName) {\r\n  // console.log('this.dreamInfo.saveDreamJob()[\"dream_job_type\"]',this.dreamInfo.saveDreamJob()[\"dream_job_type\"])\r\n  // console.log('*/*/*/', this.levelStepsDataObj)\r\n  switch (clickName) {\r\n    case 'n':\r\n      // tslint:disable-next-line: prefer-const\r\n      let nextTab: any = `${currentTab + 1}`;\r\n      console.log('currentTab',currentTab)\r\n      if (this.tabgroup._tabs._results[currentTab].isActive) {\r\n        // this.tabgroup._tabs._results[nextTab]._disabled = this.active;\r\n        this.tabgroup.selectedIndex = nextTab;\r\n        // this.icon.nativeElement.children[nextTab].classList.value =\r\n        //   'progressbar_icon_active';\r\n      }\r\n      // if(currentTab == 0) {\r\n        // if(nextTab != 4) {\r\n          // this.tabgroup._tabs._results[nextTab]._disabled = true;\r\n        // } else {\r\n          // return\r\n        // }\r\n      // }\r\n      // if(currentTab == 3) {\r\n      //   this.tabgroup._tabs._results[nextTab]._disabled = true;\r\n      // }\r\n\r\n      if(currentTab == 0\r\n      || currentTab == 1\r\n      || currentTab == 2\r\n      || currentTab == 3 && this.basicInfo.checkValidation() == \"notvalid\"\r\n      ) {\r\n        this.showSaveNext = false;\r\n      } else {\r\n        this.showSaveNext = true\r\n      }\r\n      if(\r\n        this.basicInfo.checkValidation()\r\n      &&\r\n      currentTab == 3) {\r\n        this.showSaveNext = true\r\n      } else {\r\n        this.showSaveNext = false\r\n      }\r\n      break;\r\n    case 'p':\r\n      // tslint:disable-next-line: prefer-const\r\n      let prevTab:any = `${currentTab - 1}`;\r\n      this.tabgroup.selectedIndex = prevTab;\r\n      if(currentTab == 0\r\n        || currentTab == 1\r\n        || currentTab == 2\r\n        || currentTab == 3) {\r\n          this.showSaveNext = false;\r\n        } else {\r\n          this.showSaveNext = true\r\n        }\r\n      if(\r\n          (this.basicInfo.checkValidation() != \"notvalid\")\r\n          ||\r\n          (this.basicInfo.checkValidation() == \"notvalid\" )) {\r\n          this.showSaveNext = false\r\n        } else {\r\n          this.showSaveNext = true\r\n        }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nprev() {\r\n  switch (this.tabgroup.selectedIndex) {\r\n    case 1:\r\n      console.log('currentIndex', this.tabgroup.selectedIndex);\r\n      this.checkTab(1, 'p');\r\n      this.checkPrevNext(0);\r\n      break;\r\n    case 2:\r\n      console.log('currentIndex', this.tabgroup.selectedIndex);\r\n      this.checkTab(2, 'p');\r\n      this.checkPrevNext(1);\r\n      break;\r\n    case 3:\r\n      console.log('currentIndex', this.tabgroup.selectedIndex);\r\n      this.checkTab(3, 'p');\r\n      this.checkPrevNext(2);\r\n      break;\r\n    // case 4:\r\n    //   console.log('currentIndex', this.tabgroup.selectedIndex);\r\n    //   this.checkTab(4, 'p');\r\n    //   this.checkPrevNext(3);\r\n    //   break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nnext() {\r\n  switch (this.tabgroup.selectedIndex) {\r\n    case 0:\r\n      if (this.companyInfo.checkValidation() == \"notvalid\") {\r\n        this.companyInfo.companyForm.markAllAsTouched();\r\n      } else {\r\n        this.checkTab(0, \"n\");\r\n        this.checkPrevNext(1);\r\n        console.log('data from company', this.companyInfo.saveData().companyName)\r\n        console.log('data from company', this.companyInfo.saveData().commercialName)\r\n        console.log('data from company', this.companyInfo.saveData().siret)\r\n        console.log('data from company', this.companyInfo.saveData().langauge)\r\n      }\r\n      break;\r\n    case 1:\r\n      if (this.storeInfo.checkValidation() == \"notvalid\") {\r\n        this.storeInfo.StoreForm.markAllAsTouched();\r\n      } else {\r\n        this.checkTab(1, \"n\");\r\n        this.checkPrevNext(2);\r\n        console.log('data from store', this.storeInfo.saveData().address1)\r\n        console.log('data from store', this.storeInfo.saveData().address2)\r\n        console.log('data from store', this.storeInfo.saveData().postCode)\r\n        console.log('data from store', this.storeInfo.saveData().city)\r\n        console.log('data from store', this.storeInfo.saveData().country)\r\n      }\r\n      break;\r\n    case 2:\r\n      if (this.contactInfo.checkValidation() == \"notvalid\") {\r\n        this.contactInfo.contactForm.markAllAsTouched();\r\n      } else {\r\n        this.checkTab(2, \"n\");\r\n        this.checkPrevNext(3);\r\n        console.log('data from contact', this.contactInfo.saveData().firstName)\r\n        console.log('data from contact', this.contactInfo.saveData().contactTelefonNumber)\r\n        console.log('data from contact', this.contactInfo.saveData().contactEmail)\r\n        console.log('data from contact', this.contactInfo.saveData().contactLanguge)\r\n      }\r\n      // if (this.educationInfo.checkEducationValidation() == \"notvalid\") {\r\n      //   this.educationInfo.educationForm.markAllAsTouched();\r\n      // } else {\r\n      //   this.checkTab(2, \"n\");\r\n      //   this.checkPrevNext(3);\r\n      // }\r\n      break;\r\n    case 3:\r\n      this.checkTab(3, \"n\");\r\n      this.checkPrevNext(4);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\n\r\n\r\nsaveAllData() {\r\n  debugger\r\n  if(this.basicInfo.checkValidation()) {\r\n    console.log('confirm', this.basicInfo.saveData().confirmPassword)\r\n    let userData = {\r\n      \"companyName\": this.companyInfo.saveData().companyName,\r\n      \"commercialName\": this.companyInfo.saveData().commercialName  ,\r\n      \"ape\": this.companyInfo.saveData().ape,\r\n      \"siret\": this.companyInfo.saveData().siret,\r\n      \"language\": this.companyInfo.saveData().langauge,\r\n      \"email\": this.companyInfo.saveData().email,\r\n      \"telefonNumber\": this.companyInfo.saveData().telefonNumber,\r\n      \"phoneNumber\": this.companyInfo.saveData().phoneNumber,\r\n      \"address1\": this.storeInfo.saveData().address1,\r\n      \"address2\": this.storeInfo.saveData().address2,\r\n      \"postCode\": this.storeInfo.saveData().postCode,\r\n      \"city\": this.storeInfo.saveData().city,\r\n      \"country\": this.storeInfo.saveData().country,\r\n      \"firstName\": this.contactInfo.saveData().firstName,\r\n      \"lastName\": this.contactInfo.saveData().lastName,\r\n      \"contactEmail\": this.contactInfo.saveData().contactEmail,\r\n      \"contactTelefonNumber\": this.contactInfo.saveData().contactTelefonNumber,\r\n      \"contactPhoneNumber\": this.contactInfo.saveData().contactPhoneNumber,\r\n      \"contactLanguge\": this.contactInfo.saveData().contactLanguge,\r\n      \"title\": this.contactInfo.saveData().title,\r\n      \"userName\": this.basicInfo.saveData().userName,\r\n      \"password\": this.basicInfo.saveData().password,\r\n      \"confirmPassword\": this.basicInfo.saveData().confirmPassword,\r\n    };\r\n    console.log('userData', userData)\r\n    this.authService.registerBusiness(userData).subscribe(\r\n      (res) => {\r\n        console.log('res from server', res)\r\n        this.alertSrvc.success('Registered Successfully')\r\n          this.router.navigate(['/login'])\r\n      }, (err:HttpErrorResponse) => {\r\n        this.alertSrvc.error(err.error.Message)\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\n}\r\n","\r\n        <div class=\"auth_heading\">\r\n            <div class=\"_D_Flex\">\r\n                <a routerLink=\"/register\">\r\n                    <i class=\"fas fa-arrow-left\"></i>\r\n                </a>\r\n                <h2>Register As a Business user</h2>\r\n            </div>\r\n\r\n            <span>Please fill in the form below to register</span>\r\n        </div>\r\n\r\n        <section class=\"_angular_tabs\">\r\n          <mat-tab-group #tabgroup (selectedTabChange)=\"checkPrevNext($event)\">\r\n            <mat-tab label=\"Company Info\" [disabled]=\"!active\">\r\n                <app-company-info></app-company-info>\r\n            </mat-tab>\r\n            <!-- <mat-tab label=\"Store Info\"> -->\r\n            <mat-tab label=\"Store Info\" [disabled]=\"!active\">\r\n                <app-store-info></app-store-info>\r\n            </mat-tab>\r\n            <!-- <mat-tab label=\"Contact Info\"> -->\r\n            <mat-tab label=\"Contact Info\" [disabled]=\"!active\">\r\n              <app-contact-info></app-contact-info>\r\n            </mat-tab>\r\n            <!-- <mat-tab label=\"Basic Info\"> -->\r\n            <mat-tab label=\"Basic Info\" [disabled]=\"!active\">\r\n              <app-basic-info></app-basic-info>\r\n            </mat-tab>\r\n          </mat-tab-group>\r\n        </section>\r\n          <div class=\"_mat_btn_small\" *ngIf=\"showPrev\">\r\n            <button  mat-stroked-button (click)=\"prev()\">Prev</button>\r\n          </div>\r\n          <div class=\"_mat_btn_small\" *ngIf=\"showNext\">\r\n            <button mat-flat-button  (click)=\"next()\">Next</button>\r\n          </div>\r\n\r\n          <div class=\"_mat_btn_small\" *ngIf=\"showSaveNext\">\r\n            <button mat-flat-button (click)=\"saveAllData()\"> Save </button>\r\n        </div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-register-entry-point',\r\n  templateUrl: './register-entry-point.component.html',\r\n  styleUrls: ['../auth.style.scss']\r\n})\r\nexport class RegisterEntryPointComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"auth_heading \">\r\n  <h2>Register</h2>\r\n  <p>Please fill in the form below to Register</p>\r\n</div>\r\n\r\n<div class=\"registering_type\">\r\n  <a href=\"\" class=\" type_Box_one active\" [routerLink]=\"['/register/basic']\">\r\n    <img src=\"../../../../../../assets/images/Normal_user.png\" alt=\"\">\r\n    <h5>Normal User</h5>\r\n  </a>\r\n  <a href=\"\" class=\"type_Box_one\" [routerLink]=\"['/register/business']\">\r\n    <img src=\"../../../../../../assets/images/Professional_User.png\" alt=\"\">\r\n    <h5>Professional User</h5>\r\n  </a>\r\n</div>\r\n\r\n\r\n  <div class=\"Btn_action text-center\">\r\n    <!-- <button class=\"_main_button\" type=\"submit\">Next</button> -->\r\n    <h6>if you already have an account <a [routerLink]=\"['/login']\" >login</a></h6>\r\n  </div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators, } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService, AuthService } from 'src/app/core/services';\r\nimport { User } from 'src/app/models/user.model';\r\nimport { MustMatch } from 'src/app/shared/validations/custom-validation';\r\nimport { RegisterationRequest } from '../../../models';\r\nimport { UserType } from '../../../models/userType.enum';\r\nimport { AuthApiService } from '../../../services/api/auth-api.service';\r\n\r\n@Component({\r\n  selector: 'app-register-normal-user',\r\n  templateUrl: './register-normal-user.component.html',\r\n  styleUrls: ['../auth.style.scss'],\r\n  providers: [AuthApiService]\r\n})\r\nexport class RegisterNormalUserComponent implements OnInit {\r\n  userData: User\r\n  myForm;\r\n  get userNameCtrl() { return this.myForm.get('userName') }\r\n  get firstNameCtrl() { return this.myForm.get('firstName') }\r\n  get lastNameCtrl() { return this.myForm.get('lastName') }\r\n  get mobileNumberCtrl() { return this.myForm.get('mobileNumber') }\r\n  get emailCtrl() { return this.myForm.get('email') }\r\n  get passwordCtrl() { return this.myForm.get('password') }\r\n  get confirmPasswordCtrl() { return this.myForm.get('confirmPassword') }\r\n  constructor(\r\n    private authApiService: AuthApiService,\r\n    private alertSrvc: AlertService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createNormalUserForm();\r\n  }\r\n  createNormalUserForm() {\r\n    this.myForm = this.fb.group(\r\n      {\r\n        userName: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(16),\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        firstName: [\r\n          \"\",\r\n          [Validators.required,\r\n          this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        lastName: [\r\n          \"\",\r\n          [Validators.required,\r\n          this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        mobileNumber: [\r\n          \"\",\r\n          [Validators.required,\r\n          this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        email: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.email,\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        password: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(6),\r\n            Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?{}()&])[A-Za-z\\d@$!%*#?{}()&]{8,}$/),\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n\r\n        confirmPassword: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n      },\r\n      { validator: MustMatch('password','confirmPassword') }\r\n    )\r\n  }\r\n\r\n\r\n\r\n  public passwordMatchValidator(control: AbstractControl) {\r\n    // debugger;\r\n    const password: string = control.get(\"password\").value; // get password from our password form control\r\n    const confirmPassword: string = control.get(\"confirmPassword\").value; // get password from our confirmPassword form control\r\n    // compare is the password math\r\n    if (password !== confirmPassword) {\r\n      // if they don't match, set an error in our confirmPassword form control\r\n      control.get(\"confirmPassword\").setErrors({ NotMatchPassword: true });\r\n      console.log('conf', control.get('confirmPassword'))\r\n    }\r\n  }\r\n\r\n  /* Function Name : noWhitespaceValidator\r\n   * Author :\r\n   * Created Date : 10-01-2019\r\n   * Modified Date : *\r\n   * Purpose : to validate whitespace of  text field\r\n   * PARAMS : control\r\n   */\r\n\r\n  public noWhitespaceValidator(control: FormControl) {\r\n    if (control.value) {\r\n      const isWhitespace = (control.value || \"\").trim().length === 0;\r\n      const isValid = !isWhitespace;\r\n      return isValid ? null : { whitespace: true };\r\n    }\r\n  }\r\n\r\n  register(mydata) {\r\n    debugger\r\n    if (this.myForm.invalid) {\r\n      this.myForm.markAllAsTouched()\r\n      return this.alertSrvc.error('Complete all the required fields(*) first')\r\n    }\r\n    let requestBody: RegisterationRequest = new RegisterationRequest()\r\n\r\n    console.log(requestBody)\r\n\r\n    let myformValue = this.myForm.value\r\n    requestBody.email = myformValue.email\r\n    requestBody.password = myformValue.password\r\n    requestBody.confirmPassword = myformValue.confirmPassword\r\n    requestBody.firstName = myformValue.firstName\r\n    requestBody.lastName = myformValue.lastName\r\n    requestBody.userName = myformValue.userName\r\n    requestBody.userType = UserType.basic\r\n    this.authApiService.register(requestBody).subscribe(\r\n      (res) => {\r\n        this.alertSrvc.success('Registered Successfully')\r\n        this.router.navigate(['/login'])\r\n      }, (err: HttpErrorResponse) => {\r\n        this.alertSrvc.error(err.error.Message)\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"auth_heading\">\r\n  <div class=\"_D_Flex\">\r\n    <a routerLink=\"/register\">\r\n      <i class=\"fas fa-arrow-left\"></i>\r\n    </a>\r\n    <h2>Register As Normal user</h2>\r\n  </div>\r\n    <span>Please fill in the form below to register</span>\r\n</div>\r\n<div class=\"input_form\">\r\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"register(myForm)\" >\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>first Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"firstName\"\r\n          formControlName=\"firstName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error\r\n\r\n          *ngIf=\"firstNameCtrl.invalid==true && firstNameCtrl.touched == true \"  class=\"text-danger\" role=\"alert\" >\r\n            first Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>last Name</mat-label>\r\n          <input\r\n          formControlName=\"lastName\"\r\n          matInput\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          type=\"text\">\r\n          <mat-error *ngIf=\"lastNameCtrl.invalid==true &&lastNameCtrl.touched == true \"class=\"text-danger\" role=\"alert\" >\r\n            last Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>user Name</mat-label>\r\n          <input matInput\r\n          formControlName=\"userName\" type=\"text\">\r\n            <mat-error *ngIf=\"userNameCtrl.invalid==true && userNameCtrl.touched == true \" class=\"text-danger\" role=\"alert\" >\r\n              UserName is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput  formControlName=\"email\" type=\"email\"\r\n          id=\"exampleInputEmail1\"\r\n            aria-describedby=\"emailHelp\"\r\n                >\r\n            <!-- <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone\r\n                else.</small> -->\r\n                <mat-error *ngIf=\"emailCtrl.invalid == true\r\n                && emailCtrl.touched == true &&\r\n                emailCtrl.errors.required\">\r\n                  Email is required\r\n                </mat-error>\r\n                <mat-error *ngIf=\"emailCtrl.invalid == true\r\n                && emailCtrl.touched == true &&\r\n                emailCtrl.errors.email\">\r\n                Email is invalid\r\n                </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\" style=\"margin-bottom: 5px;\">\r\n            <mat-label>Password</mat-label>\r\n            <input matInput formControlName=\"password\"  type=\"password\" id=\"exampleInputPassword1\">\r\n            <mat-error\r\n            *ngIf=\"\r\n              myForm.controls.password?.invalid &&\r\n              myForm.controls.password?.errors.pattern &&\r\n              (myForm.controls.password?.dirty ||\r\n              myForm.controls.password?.touched)\r\n              \">\r\n              At least 8 characters, 1 number, 1 uppercase letter, 1 lowercase letter, 1 special character\r\n            </mat-error>\r\n\r\n            <mat-error\r\n              *ngIf=\"\r\n                myForm.controls.password?.invalid &&\r\n                myForm.controls.password?.errors.required &&\r\n                (myForm.controls.password?.dirty ||\r\n                myForm.controls.password?.touched)\r\n                \"\r\n            >\r\n              Password Is Required\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Confirm Password</mat-label>\r\n          <input matInput formControlName=\"confirmPassword\"   type=\"password\" id=\"exampleInputPassword1\" >\r\n            <mat-error\r\n              *ngIf=\"\r\n              myForm.controls.confirmPassword?.invalid\r\n              &&\r\n                (myForm.controls.confirmPassword?.dirty ||\r\n                myForm.controls.confirmPassword?.touched)\r\n              \"\r\n            >\r\n              <span *ngIf=\"myForm.controls.confirmPassword?.hasError('mustMatch')\">\r\n                Password & Confirm Password does not match.\r\n              </span>\r\n              <span *ngIf=\"myForm.controls.confirmPassword?.hasError('required')\">\r\n                confirm password is required\r\n              </span>\r\n          </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Mobile Number</mat-label>\r\n            <input matInput\r\n            formControlName=\"mobileNumber\"\r\n            appNumberCharacters\r\n            constraint=\"numbersWithSpecial\"\r\n            type=\"text\" >\r\n            <mat-error *ngIf=\"mobileNumberCtrl.invalid == true &&\r\n            mobileNumberCtrl.touched == true &&\r\n            mobileNumberCtrl.errors.required\">\r\n            mobileNumber is required\r\n            </mat-error>\r\n            <!-- <mat-error *ngIf=\"mobileNumberCtrl.invalid == true &&\r\n            mobileNumberCtrl.touched == true &&\r\n            mobileNumberCtrl.errors.pattern\">\r\n              mobileNumber is invalid\r\n            </mat-error> -->\r\n          </mat-form-field>\r\n\r\n\r\n        <div class=\"Btn_action pb-5\">\r\n          <button mat-flat-button color=\"primary\">register</button>\r\n          <h6>if you already have an account\r\n              <a routerLink=\"/login\" >login</a>\r\n          </h6>\r\n        </div>\r\n\r\n    </form>\r\n</div>\r\n","export class ConfirmEmailRequest {\r\n  code :string\r\n  userId :string\r\n}\r\n","export class ForgetPasswordRequest {\r\n    email: string\r\n}","export * from './forget-password-request.model'\r\nexport * from './login-request.model'\r\nexport * from './register-request.model'\r\nexport * from './reset-password-request.model'\r\nexport * from './confirm-email-request.model'\r\nexport * from './register-request-business.model'\r\nexport * from './userData.model'\r\nexport * from './userType.enum'\r\n","export class LoginRequest {\r\n    email: string\r\n    password: string\r\n}","export class RegisterationRequestBusiness {\r\n  companyName: string;\r\n  commercialName: string;\r\n  email: string;\r\n  userName: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n  ape: string;\r\n  siret: string;\r\n  language: string;\r\n  telefonNumber: string;\r\n  phoneNumber: string;\r\n  // faxNumber: string;\r\n  address1: string;\r\n  address2: string;\r\n  postCode: string;\r\n  city: string;\r\n  country: string;\r\n  title: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  contactEmail: string;\r\n  contactTelefonNumber: string;\r\n  contactPhoneNumber: string;\r\n  // contactFaxNumber: string;\r\n  contactLanguge: string\r\n}\r\n","export class RegisterationRequest {\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    userName: string\r\n    password: string\r\n    confirmPassword: string\r\n    userType: string\r\n}\r\n","export class ResetPasswordRequest {\r\n    email: string\r\n    token: string\r\n    password: string\r\n    confirmPassword: string\r\n}","export class UserData {\r\n  email: string\r\n  id: string\r\n  isVerified: boolean\r\n  jwToken: string\r\n  roles: string []\r\n  userName: string\r\n}\r\n","export enum UserType {\r\n  basic = 'basic',\r\n  business = 'business'\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n          // return if another validator has already found an error on the matchingControl\r\n          return;\r\n      }\r\n\r\n      // set error on matchingControl if validation fails\r\n      if (control.value !== matchingControl.value) {\r\n          matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n          matchingControl.setErrors(null);\r\n      }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}