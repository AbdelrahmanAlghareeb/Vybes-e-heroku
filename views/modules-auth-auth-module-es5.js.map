{"version":3,"sources":["webpack:///src/app/modules/auth/auth-routing.module.ts","webpack:///src/app/modules/auth/auth.module.ts","webpack:///src/app/modules/auth/components/auth-layout/auth-layout.component.ts","webpack:///src/app/modules/auth/components/auth-layout/auth-layout.component.html","webpack:///src/app/modules/auth/components/confirm-email/confirm-email.component.ts","webpack:///src/app/modules/auth/components/forget-password/forget-password.component.ts","webpack:///src/app/modules/auth/components/forget-password/forget-password.component.html","webpack:///src/app/modules/auth/components/index.ts","webpack:///src/app/modules/auth/components/login/login.component.ts","webpack:///src/app/modules/auth/components/login/login.component.html","webpack:///src/app/modules/auth/components/new-password/new-password.component.ts","webpack:///src/app/modules/auth/components/new-password/new-password.component.html","webpack:///src/app/modules/auth/components/register/_controls/basic-info/ComparePassword.Module.ts","webpack:///src/app/modules/auth/components/register/_controls/basic-info/basic-info.component.ts","webpack:///src/app/modules/auth/components/register/_controls/basic-info/basic-info.component.html","webpack:///src/app/modules/auth/components/register/_controls/basic-info/confirm-equal-validator.directive.ts","webpack:///src/app/modules/auth/components/register/_controls/company-info/company-info.component.ts","webpack:///src/app/modules/auth/components/register/_controls/company-info/company-info.component.html","webpack:///src/app/modules/auth/components/register/_controls/contact-info/contact-info.component.ts","webpack:///src/app/modules/auth/components/register/_controls/contact-info/contact-info.component.html","webpack:///src/app/modules/auth/components/register/_controls/store-info/store-info.component.ts","webpack:///src/app/modules/auth/components/register/_controls/store-info/store-info.component.html","webpack:///src/app/modules/auth/components/register/register-business-user/register-business-user.component.ts","webpack:///src/app/modules/auth/components/register/register-business-user/register-business-user.component.html","webpack:///src/app/modules/auth/components/register/register-entry-point/register-entry-point.component.ts","webpack:///src/app/modules/auth/components/register/register-entry-point/register-entry-point.component.html","webpack:///src/app/modules/auth/components/register/register-normal-user/register-normal-user.component.ts","webpack:///src/app/modules/auth/components/register/register-normal-user/register-normal-user.component.html","webpack:///src/app/modules/auth/models/confirm-email-request.model.ts","webpack:///src/app/modules/auth/models/forget-password-request.model.ts","webpack:///src/app/modules/auth/models/index.ts","webpack:///src/app/modules/auth/models/login-request.model.ts","webpack:///src/app/modules/auth/models/register-request-business.model.ts","webpack:///src/app/modules/auth/models/register-request.model.ts","webpack:///src/app/modules/auth/models/reset-password-request.model.ts","webpack:///src/app/modules/auth/models/userData.model.ts","webpack:///src/app/modules/auth/models/userType.enum.ts","webpack:///src/app/shared/validations/custom-validation.ts"],"names":["routes","path","component","children","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","providers","AuthLayoutComponent","selector","templateUrl","styleUrls","ConfirmEmailComponent","activatedRoute","router","alertSrvc","authApiSrvc","authSrvc","queryParams","subscribe","params","confirmEmailRequest","code","userId","confirmEmail","res","success","navigate","ForgetPasswordComponent","LoginComponent","_AuthApiService","errorMsg","myform","required","email","minLength","mydata","invalid","markAllAsTouched","error","requestBody","console","log","myformValue","value","password","login","saveUserData","data","err","Message","get","navigateToRegister","NewPasswordComponent","ComparePasswordModule","BasicInfoComponent","fb","createBasicForm","basicForm","group","userName","updateOn","validators","pattern","confirmPassword","validator","control","isWhitespace","trim","length","isValid","whitespace","saveStoreData","controls","valid","CompareDirective","controlToCompare","parent","appConfirmEqualValidators","notEqual","provide","useExisting","multi","CompanyInfoComponent","languages","id","name","createCompanyForm","companyForm","companyName","commercialName","siret","ape","langauge","telefonNumber","phoneNumber","maxLength","noWhitespaceValidator","saveCompanyData","ContactInfoComponent","gender","createContactForm","contactForm","contactTelefonNumber","contactPhoneNumber","contactFaxNumber","contactLanguge","contactEmail","firstName","lastName","title","e","saveContactData","StoreInfoComponent","country","createStoreForm","StoreForm","address1","address2","postCode","city","RegisterBusinessUserComponent","authService","showNext","showPrev","showSaveNext","active","checkPrevNext","tabgroup","i","_tabs","_results","_disabled","currentIndex","checkTab","currentTab","clickName","nextTab","isActive","selectedIndex","basicInfo","checkValidation","prevTab","companyInfo","saveData","storeInfo","contactInfo","userData","registerBusiness","RegisterEntryPointComponent","RegisterNormalUserComponent","authApiService","createNormalUserForm","myForm","mobileNumber","setErrors","NotMatchPassword","userType","basic","register","ConfirmEmailRequest","ForgetPasswordRequest","LoginRequest","RegisterationRequestBusiness","RegisterationRequest","ResetPasswordRequest","UserData","UserType","MustMatch","controlName","matchingControlName","formGroup","matchingControl","errors","mustMatch"],"mappings":"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","file":"modules-auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ConfirmEmailComponent, LoginComponent, RegisterBusinessUserComponent, RegisterEntryPointComponent, RegisterNormalUserComponent } from './components';\r\nimport { AuthLayoutComponent } from './components/auth-layout/auth-layout.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    component : AuthLayoutComponent,\r\n    children : [\r\n      { path:\"register\", children : [\r\n          { path:\"\", component:RegisterEntryPointComponent },\r\n          { path:\"basic\", component:RegisterNormalUserComponent },\r\n          { path:\"business\", component:RegisterBusinessUserComponent },\r\n        ]\r\n      },\r\n      { path:\"login\", component:LoginComponent },\r\n      { path:\"confirm-email\", component:ConfirmEmailComponent },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n\r\n\r\n","import { NgModule, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { ForgetPasswordComponent, LoginComponent, NewPasswordComponent, RegisterBusinessUserComponent, RegisterEntryPointComponent, RegisterNormalUserComponent } from './components';\r\nimport { FormsDependenciesModule } from 'src/app/forms-dependencies/forms-dependencies.module';\r\nimport { AuthApiService } from './services/api/auth-api.service';\r\nimport { SharedModule } from './../../shared/shared.module';\r\n\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/Input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\nimport { CompanyInfoComponent } from './components/register/_controls/company-info/company-info.component';\r\nimport { StoreInfoComponent } from './components/register/_controls/store-info/store-info.component';\r\nimport { ContactInfoComponent } from './components/register/_controls/contact-info/contact-info.component';\r\nimport { BasicInfoComponent } from './components/register/_controls/basic-info/basic-info.component';\r\nimport { ConfirmEmailComponent } from './components/confirm-email/confirm-email.component';\r\nimport { AuthLayoutComponent } from './components/auth-layout/auth-layout.component';\r\nimport { ComparePasswordModule } from './components/register/_controls/basic-info/ComparePassword.Module';\r\n\r\n// ghareebovich@gmail.com\r\n// P@$$W0rd\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterBusinessUserComponent,\r\n    RegisterNormalUserComponent,\r\n    ForgetPasswordComponent,\r\n    NewPasswordComponent,\r\n    RegisterEntryPointComponent,\r\n    // confirmEquelValidator,\r\n    CompanyInfoComponent,\r\n    StoreInfoComponent,\r\n    ContactInfoComponent,\r\n    BasicInfoComponent,\r\n    ConfirmEmailComponent,\r\n    AuthLayoutComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    FormsDependenciesModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    ComparePasswordModule\r\n  ],\r\n  exports: [\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n  ],\r\n  providers: [\r\n    AuthApiService\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'auth-layout',\r\n  templateUrl: './auth-layout.component.html',\r\n  styleUrls: ['./auth-layout.component.scss','../register/auth.style.scss']\r\n})\r\nexport class AuthLayoutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<section class=\"App_Loign\">\r\n  <div class=\"container\">\r\n\r\n    <div class=\"auth_header_logo\">\r\n      <div class=\"auth_logo\">\r\n        <img src=\"assets/images/SVG/Logo-Orange.svg\" alt=\"\">\r\n      </div>\r\n\r\n      <button>\r\n\r\n          <a [routerLink]=\"['/']\">\r\n            <i class=\"fas fa-times\">\r\n            </i>\r\n          </a>\r\n      </button>\r\n    </div>\r\n\r\n      <router-outlet></router-outlet>\r\n      <div class=\"auth_img\">\r\n          <img src=\"../../../../assets/images/Login_bg.jpg\" alt=\"\">\r\n      </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertService, AuthService } from 'src/app/core/services';\r\nimport { ConfirmEmailRequest } from '../../models';\r\nimport { AuthApiService } from '../../services/api/auth-api.service';\r\n\r\n@Component({\r\n  selector: 'app-confirm-email',\r\n  templateUrl: './confirm-email.component.html',\r\n  styleUrls: ['./confirm-email.component.scss']\r\n})\r\nexport class ConfirmEmailComponent implements OnInit {\r\n\r\n\r\n  constructor(\r\n    private activatedRoute:ActivatedRoute,\r\n    private router:Router,\r\n    private alertSrvc:AlertService,\r\n    private authApiSrvc : AuthApiService,\r\n    private authSrvc : AuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe((params)=> {\r\n        let confirmEmailRequest = new ConfirmEmailRequest()\r\n        confirmEmailRequest.code = params.code\r\n        confirmEmailRequest.userId = params.userId\r\n        if(confirmEmailRequest.code && confirmEmailRequest.userId) {\r\n          this.authApiSrvc.confirmEmail(confirmEmailRequest)\r\n          .subscribe(\r\n            (res)=>{\r\n              this.alertSrvc.success('Email confirmed successfully');\r\n              this.router.navigate(['/']);\r\n            },\r\n\r\n          )\r\n        }\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.scss']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>forget-password works!</p>\r\n","export * from './forget-password/forget-password.component'\r\nexport * from './login/login.component'\r\nexport * from './new-password/new-password.component'\r\nexport * from './register/register-business-user/register-business-user.component'\r\nexport * from './register/register-entry-point/register-entry-point.component'\r\nexport * from './register/register-normal-user/register-normal-user.component'\r\nexport * from './confirm-email/confirm-email.component'\r\n\r\n\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService, AuthService } from 'src/app/core/services';\r\nimport {LoginRequest  } from '../../models/login-request.model';\r\nimport {AuthApiService} from '../../services/api/auth-api.service' ;\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  providers:[AuthApiService]\r\n\r\n})\r\nexport class LoginComponent implements OnInit {\r\nerrorMsg= '';\r\n constructor(\r\n   private  _AuthApiService:AuthApiService,\r\n   private  alertSrvc:AlertService,\r\n   private  authSrvc:AuthService,\r\n   private router : Router\r\n   ) { }\r\n ngOnInit(): void { }\r\n\r\n get emailCtrl():AbstractControl { return this.myform.get('email') }\r\n get passwordCtrl():AbstractControl { return this.myform.get('password') }\r\n\r\n  myform:FormGroup = new FormGroup({\r\n    'email':new FormControl (null,[Validators.required,Validators.email]),\r\n    'password':new FormControl (null,[Validators.required ,Validators.minLength(6)]),\r\n    'rememberMe':new FormControl (null)\r\n  })\r\n\r\n  login(mydata){\r\n    if(this.myform.invalid) {\r\n      this.myform.markAllAsTouched()\r\n      return this.alertSrvc.error('Complete all the fields')\r\n    }\r\n    let requestBody : LoginRequest = new LoginRequest ();\r\n    console.log (requestBody)\r\n    let myformValue = this.myform.value\r\n    requestBody.email = myformValue.email\r\n    requestBody.password = myformValue.password\r\n    this._AuthApiService.login(requestBody).subscribe(\r\n      (res)=>{\r\n        this.alertSrvc.success('Logged In successfully')\r\n        this.authSrvc.saveUserData(res.data)\r\n        this.router.navigate(['/'])\r\n      },(err:HttpErrorResponse)=>{\r\n        this.alertSrvc.error(err.error.Message)\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  navigateToRegister(){\r\n    this.router.navigate(['/register'])\r\n  }\r\n\r\n}\r\n","\r\n\r\n<div class=\"auth_heading\">\r\n  <h2>login</h2>\r\n  <p>Please fill in the form below to Login</p>\r\n\r\n</div>\r\n<div class=\"input_form\">\r\n  <form [formGroup]=\"myform\" (ngSubmit)=\"login(myform)\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Email Address</mat-label>\r\n      <input type=\"email\" matInput formControlName=\"email\" id=\"email\" aria-describedby=\"email\">\r\n      <mat-error *ngIf=\"emailCtrl.invalid == true\r\n       && emailCtrl.touched == true\r\n      && emailCtrl.errors.required \">\r\n        Email is required\r\n      </mat-error>\r\n      <mat-error *ngIf=\"emailCtrl.invalid == true\r\n       && emailCtrl.touched == true\r\n      && emailCtrl.errors.email\">\r\n      Email is Invalid\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput type=\"password\" formControlName=\"password\"  id=\"Password\">\r\n      <!-- <mat-error *ngIf=\"\r\n      passwordCtrl.invalid == true && passwordCtrl.touched == true\r\n      && passwordCtrl.errors.required\">\r\n        password is required\r\n      </mat-error> -->\r\n      <mat-error\r\n        *ngIf=\"\r\n          myform.controls.password?.invalid &&\r\n          myform.controls.password?.errors &&\r\n            (myform.controls.password?.dirty ||\r\n            myform.controls.password?.touched)\r\n          \"\r\n      >\r\n    Password Is Required\r\n  </mat-error>\r\n    </mat-form-field>\r\n    <span *ngIf=\"errorMsg\" class=\"text-danger\" role=\"alert\">\r\n      {{errorMsg}}\r\n    </span>\r\n    <!-- <p class=\"text-danger\"> {{errorMsg}}</p> -->\r\n\r\n\r\n      <div class=\"form-group form-check\">\r\n          <mat-checkbox type=\"checkbox\" formControlName=\"rememberMe\" id=\"rememberMe\">\r\n            Remember Me\r\n          </mat-checkbox>\r\n      </div>\r\n\r\n      <div class=\"Btn_action\">\r\n        <button mat-flat-button color=\"primary\">login</button>\r\n        <button mat-stroked-button color=\"primary\" (click)='navigateToRegister()'>register</button>\r\n      </div>\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-new-password',\r\n  templateUrl: './new-password.component.html',\r\n  styleUrls: ['./new-password.component.scss']\r\n})\r\nexport class NewPasswordComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>new-password works!</p>\r\n","import { NgModule } from '@angular/core';\r\n\r\n// Directive  \r\nimport { CompareDirective } from './confirm-equal-validator.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CompareDirective\r\n  ],\r\n  exports: [\r\n    CompareDirective\r\n  ]\r\n})\r\nexport class ComparePasswordModule { } ","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { from } from 'rxjs';\r\nimport { MustMatch } from 'src/app/shared/validations/custom-validation';\r\n\r\n@Component({\r\n  selector: 'app-basic-info',\r\n  templateUrl: './basic-info.component.html',\r\n  styleUrls: ['./basic-info.component.scss']\r\n})\r\nexport class BasicInfoComponent implements OnInit {\r\n  basicForm: FormGroup;\r\n  // get confirmPasswordCtrl () { return this.basicForm.get('confirmPassword') } ;\r\n\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createBasicForm();\r\n\r\n  }\r\n  createBasicForm() {\r\n    this.basicForm = this.fb.group({\r\n      userName: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', {\r\n        updateOn: 'change',\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(6),\r\n          Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?{}()&])[A-Za-z\\d@$!%*#?{}()&]{8,}$/),\r\n        ]\r\n      }),\r\n      confirmPassword: new FormControl('', {\r\n        updateOn: 'change',\r\n        validators: [Validators.required],\r\n      }),\r\n    },\r\n      { validator: MustMatch('password','confirmPassword') }\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  /* Function Name : noWhitespaceValidator\r\n   * Author :\r\n   * Created Date : 10-01-2019\r\n   * Modified Date : *\r\n   * Purpose : to validate whitespace of  text field\r\n   * PARAMS : control\r\n   */\r\n\r\n  public noWhitespaceValidator(control: FormControl) {\r\n    if (control.value) {\r\n      const isWhitespace = (control.value || \"\").trim().length === 0;\r\n      const isValid = !isWhitespace;\r\n      return isValid ? null : { whitespace: true };\r\n    }\r\n  }\r\n\r\n  /* Function Name : saveData\r\n  * Author :\r\n  * Created Date :\r\n  * Modified Date : *\r\n  * Purpose : Object That Send To The Parent To Save It\r\n  * PARAMS :\r\n  */\r\n  saveData() {\r\n    const saveStoreData = {\r\n      userName: this.basicForm.controls.userName.value,\r\n      password: this.basicForm.controls.password.value,\r\n      confirmPassword: this.basicForm.controls.confirmPassword.value,\r\n    }\r\n    return saveStoreData;\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    console.log('hi')\r\n    if (this.basicForm.valid) {\r\n      return this.basicForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"basicForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * userName </mat-label>\r\n          <input type=\"text\" matInput name=\"userName\" formControlName=\"userName\">\r\n          <mat-error\r\n            *ngIf=\"basicForm.controls.userName?.invalid && basicForm.controls.userName?.errors && (basicForm.controls.userName?.dirty || basicForm.controls.userName?.touched)\">\r\n            userName is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-bottom: 10px;\">\r\n          <mat-label> * password </mat-label>\r\n          <input type=\"password\" matInput name=\"password\" formControlName=\"password\" #password>\r\n          <mat-error *ngIf=\"basicForm.controls['password']['errors']?.pattern\">\r\n            At least 8 characters, 1 number, 1 uppercase letter, 1 lowercase letter, 1 special character\r\n          </mat-error>\r\n\r\n          <mat-error *ngIf=\"basicForm.controls['password']['errors']?.required && basicForm.get('password').touched\">\r\n            Password Is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * confirmPassword </mat-label>\r\n          <input type=\"password\" matInput name=\"confirmPassword\" formControlName=\"confirmPassword\" >\r\n\r\n          <mat-error\r\n              *ngIf=\"\r\n              basicForm.controls.confirmPassword?.invalid\r\n              &&\r\n                (basicForm.controls.confirmPassword?.dirty ||\r\n                basicForm.controls.confirmPassword?.touched)\r\n              \"\r\n            >\r\n              <span *ngIf=\"basicForm.controls.confirmPassword?.hasError('mustMatch')\">\r\n                Password & Confirm Password does not match.\r\n              </span>\r\n              <span *ngIf=\"basicForm.controls.confirmPassword?.hasError('required')\">\r\n                confirm password is required\r\n              </span>\r\n          </mat-error>\r\n\r\n        </mat-form-field>\r\n      </div>\r\n\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Attribute, Directive, Input } from '@angular/core';\r\nimport { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\r\nimport { Key } from 'protractor';\r\n\r\n@Directive(\r\n    {\r\n        selector: '[appConfirmEqualValidators]',\r\n        providers: [{ provide: NG_VALIDATORS, useExisting: CompareDirective, multi: true }]\r\n    }\r\n\r\n)\r\n\r\nexport class CompareDirective implements Validator {\r\n\r\n\r\n    @Input() appConfirmEqualValidators: string;\r\n    validate(control: AbstractControl): { [Key: string]: any } | null {\r\n        const controlToCompare = control.parent.get(this.appConfirmEqualValidators);\r\n        if (controlToCompare && controlToCompare.value !== control.value) {\r\n            return { notEqual: true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-company-info',\r\n  templateUrl: './company-info.component.html',\r\n  styleUrls: ['./company-info.component.scss']\r\n})\r\nexport class CompanyInfoComponent implements OnInit {\r\n  companyForm: FormGroup;\r\n  languages = [\r\n    { id: 1, name: 'English' },\r\n    { id: 2, name: 'French' },\r\n    { id: 3, name: 'German' },\r\n  ]\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createCompanyForm();\r\n  }\r\n\r\n\r\n  createCompanyForm() {\r\n    this.companyForm = this.fb.group({\r\n      companyName: new FormControl('', [Validators.required]),\r\n      commercialName: new FormControl('', [Validators.required]),\r\n      siret: new FormControl('', [Validators.required]),\r\n      ape: new FormControl('', [Validators.required]),\r\n      langauge: new FormControl('', [Validators.required]),\r\n      telefonNumber: new FormControl('', [Validators.required, Validators.pattern(/^[- +()]*[0-9][- +()0-9]*$/),]),\r\n      phoneNumber: new FormControl('',\r\n        [Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(18),\r\n        // Validators.pattern(/^(\\+\\d{1,3}[- ]?)?\\d{15}$/),\r\n        Validators.pattern(/^[- +()]*[0-9][- +()0-9]*$/),\r\n        this.noWhitespaceValidator,\r\n        ]),\r\n      // faxNumber:  new FormControl(''),\r\n      email: new FormControl('', { validators: [Validators.required, Validators.email] }),\r\n    });\r\n  }\r\n\r\n  /* Function Name : noWhitespaceValidator\r\n * Author :\r\n * Created Date : 10-01-2019\r\n * Modified Date : *\r\n * Purpose : to validate whitespace of  text field\r\n * PARAMS : control\r\n */\r\n\r\n  public noWhitespaceValidator(control: FormControl) {\r\n    if (control.value) {\r\n      const isWhitespace = (control.value || \"\").trim().length === 0;\r\n      const isValid = !isWhitespace;\r\n      return isValid ? null : { whitespace: true };\r\n    }\r\n  }\r\n\r\n  /* Function Name : saveData\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Object That Send To The Parent To Save It\r\n   * PARAMS :\r\n   */\r\n  saveData() {\r\n    const saveCompanyData = {\r\n      companyName: this.companyForm.controls.companyName.value,\r\n      commercialName: this.companyForm.controls.commercialName.value,\r\n      siret: this.companyForm.controls.siret.value,\r\n      ape: this.companyForm.controls.ape.value,\r\n      langauge: this.companyForm.controls.langauge.value,\r\n      telefonNumber: this.companyForm.controls.telefonNumber.value,\r\n      phoneNumber: this.companyForm.controls.phoneNumber.value,\r\n      // faxNumber: this.companyForm.controls.faxNumber.value ,\r\n      email: this.companyForm.controls.email.value,\r\n    }\r\n    return saveCompanyData;\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    if (this.companyForm.valid) {\r\n      return this.companyForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"companyForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Company Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"companyName\"\r\n          formControlName=\"companyName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.companyName?.invalid && companyForm.controls.companyName?.errors && (companyForm.controls.companyName?.dirty || companyForm.controls.companyName?.touched)\">\r\n            Company Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Commercial Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"commercialName\"\r\n          formControlName=\"commercialName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.commercialName?.invalid &&\r\n           companyForm.controls.commercialName?.errors &&\r\n            (companyForm.controls.commercialName?.dirty ||\r\n             companyForm.controls.commercialName?.touched)\">\r\n             Commercial Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Siret</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"siret\"\r\n          formControlName=\"siret\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.siret?.invalid &&\r\n           companyForm.controls.siret?.errors &&\r\n            (companyForm.controls.siret?.dirty ||\r\n             companyForm.controls.siret?.touched)\">\r\n             Siret is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Ape</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"ape\"\r\n          formControlName=\"ape\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.ape?.invalid &&\r\n           companyForm.controls.ape?.errors &&\r\n            (companyForm.controls.ape?.dirty ||\r\n             companyForm.controls.ape?.touched)\">\r\n             Ape is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"langauge\">\r\n            <mat-option value=\"\"> Choose Language </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let lang of languages\"\r\n                value=\"{{ lang.name }}\"\r\n            >\r\n            {{lang.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.langauge?.invalid &&\r\n              companyForm.controls.langauge?.errors.required &&\r\n              (companyForm.controls.langauge?.dirty ||\r\n                companyForm.controls.langauge?.touched)\r\n            \"\r\n          >\r\n            Language Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Email</mat-label>\r\n          <input\r\n          type=\"email\"\r\n          matInput\r\n          name=\"email\"\r\n          formControlName=\"email\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithCharsWithSpecial\"\r\n          >\r\n          <mat-error *ngIf=\"companyForm.controls.email?.invalid &&\r\n           companyForm.controls.email?.errors.required &&\r\n            (companyForm.controls.email?.dirty ||\r\n             companyForm.controls.email?.touched)\">\r\n             Email is Required\r\n          </mat-error>\r\n          <mat-error *ngIf=\"companyForm.controls.email?.invalid &&\r\n          companyForm.controls.email?.errors.email &&\r\n            (companyForm.controls.email?.dirty || companyForm.controls.email?.touched)\">\r\n            Email Is Invalid\r\n        </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Telefon Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"telefonNumber\"\r\n          formControlName=\"telefonNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.telefonNumber?.invalid &&\r\n              companyForm.controls.telefonNumber?.errors.required &&\r\n              (companyForm.controls.telefonNumber?.dirty ||\r\n                companyForm.controls.telefonNumber?.touched)\r\n            \"\r\n          >\r\n            Telefon Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Phone Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"phoneNumber\"\r\n          formControlName=\"phoneNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.phoneNumber?.invalid &&\r\n              companyForm.controls.phoneNumber?.errors.required &&\r\n              (companyForm.controls.phoneNumber?.dirty ||\r\n                companyForm.controls.phoneNumber?.touched)\r\n            \"\r\n          >\r\n            Phone Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <!-- <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> Fax Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"faxNumber\"\r\n          formControlName=\"faxNumber\"\r\n          appNumberCharactrs\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              companyForm.controls.faxNumber?.invalid &&\r\n              companyForm.controls.faxNumber?.errors.required &&\r\n              (companyForm.controls.faxNumber?.dirty ||\r\n                companyForm.controls.faxNumber?.touched)\r\n            \"\r\n          >\r\n          Fax Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div> -->\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-contact-info',\r\n  templateUrl: './contact-info.component.html',\r\n  styleUrls: ['./contact-info.component.scss']\r\n})\r\nexport class ContactInfoComponent implements OnInit {\r\n  contactForm: FormGroup;\r\n  languages = [\r\n    {id: 1, name: 'English'},\r\n    {id: 2, name: 'French'},\r\n    {id: 3, name: 'German'},\r\n  ]\r\n  gender = [\r\n    {id: 1, name: 'Mr'},\r\n    {id: 2, name: 'Mrs'},\r\n  ]\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createContactForm();\r\n  }\r\n\r\n\r\n  createContactForm() {\r\n    this.contactForm = this.fb.group({\r\n      contactTelefonNumber: new FormControl('', [Validators.required]),\r\n      contactPhoneNumber:  new FormControl('', [Validators.required]),\r\n      contactFaxNumber:  new FormControl(''),\r\n      contactLanguge:  new FormControl('', [Validators.required]),\r\n      contactEmail:  new FormControl('', {validators : [Validators.required, Validators.email]}),\r\n      firstName:  new FormControl('', [Validators.required]),\r\n      lastName:  new FormControl('', [Validators.required]),\r\n      title:  new FormControl('', [Validators.required]),\r\n    });\r\n  }\r\n\r\n  addContactInfo(e) {\r\n\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    if(this.contactForm.valid) {\r\n      return this.contactForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n\r\n  /* Function Name : saveData\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Object That Send To The Parent To Save It\r\n   * PARAMS :\r\n   */\r\n  saveData() {\r\n    const saveContactData = {\r\n      contactTelefonNumber: this.contactForm.controls.contactTelefonNumber.value ,\r\n      contactPhoneNumber: this.contactForm.controls.contactPhoneNumber.value ,\r\n      contactFaxNumber: this.contactForm.controls.contactFaxNumber.value ,\r\n      contactLanguge: this.contactForm.controls.contactLanguge.value ,\r\n      contactEmail: this.contactForm.controls.contactEmail.value ,\r\n      firstName: this.contactForm.controls.firstName.value ,\r\n      lastName: this.contactForm.controls.lastName.value ,\r\n      title: this.contactForm.controls.title.value ,\r\n    }\r\n    return saveContactData;\r\n  }\r\n\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"contactForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"title\">\r\n            <mat-option value=\"\"> Choose Title </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let title of gender\"\r\n                value=\"{{ title.id }}\"\r\n            >\r\n            {{title.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.title?.invalid &&\r\n              contactForm.controls.title?.errors.required &&\r\n              (contactForm.controls.title?.dirty ||\r\n                contactForm.controls.title?.touched)\r\n            \"\r\n          >\r\n            Title Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * First Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"firstName\"\r\n          formControlName=\"firstName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"contactForm.controls.firstName?.invalid && contactForm.controls.firstName?.errors && (contactForm.controls.firstName?.dirty || contactForm.controls.firstName?.touched)\">\r\n            First Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Last Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"lastName\"\r\n          formControlName=\"lastName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error *ngIf=\"contactForm.controls.lastName?.invalid &&\r\n           contactForm.controls.lastName?.errors &&\r\n            (contactForm.controls.lastName?.dirty ||\r\n             contactForm.controls.lastName?.touched)\">\r\n             Last Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"contactLanguge\">\r\n            <mat-option value=\"\"> Choose Language </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let lang of languages\"\r\n                value=\"{{ lang.name }}\"\r\n            >\r\n            {{lang.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactLanguge?.invalid &&\r\n              contactForm.controls.contactLanguge?.errors.required &&\r\n              (contactForm.controls.contactLanguge?.dirty ||\r\n                contactForm.controls.contactLanguge?.touched)\r\n            \"\r\n          >\r\n          Contact Languge Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Email</mat-label>\r\n          <input\r\n          type=\"email\"\r\n          matInput\r\n          name=\"contactEmail\"\r\n          formControlName=\"contactEmail\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithCharsWithSpecial\"\r\n          >\r\n          <mat-error *ngIf=\"contactForm.controls.contactEmail?.invalid &&\r\n           contactForm.controls.contactEmail?.errors.required &&\r\n            (contactForm.controls.contactEmail?.dirty ||\r\n             contactForm.controls.contactEmail?.touched)\">\r\n             Contact Email is Required\r\n          </mat-error>\r\n          <mat-error *ngIf=\"contactForm.controls.contactEmail?.invalid &&\r\n          contactForm.controls.contactEmail?.errors.email &&\r\n            (contactForm.controls.contactEmail?.dirty || contactForm.controls.contactEmail?.touched)\">\r\n            Contact Email Is Invalid\r\n        </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Telefon Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"contactTelefonNumber\"\r\n          formControlName=\"contactTelefonNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactTelefonNumber?.invalid &&\r\n              contactForm.controls.contactTelefonNumber?.errors.required &&\r\n              (contactForm.controls.contactTelefonNumber?.dirty ||\r\n                contactForm.controls.contactTelefonNumber?.touched)\r\n            \"\r\n          >\r\n          Contact Telefon Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * Phone Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"contactPhoneNumber\"\r\n          formControlName=\"contactPhoneNumber\"\r\n          appNumberCharacters\r\n          constraint=\"numbersWithSpecial\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactPhoneNumber?.invalid &&\r\n              contactForm.controls.contactPhoneNumber?.errors.required &&\r\n              (contactForm.controls.contactPhoneNumber?.dirty ||\r\n                contactForm.controls.contactPhoneNumber?.touched)\r\n            \"\r\n          >\r\n          Contact Phone Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <!-- <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> Fax Number</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"contactFaxNumber\"\r\n          formControlName=\"contactFaxNumber\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n              contactForm.controls.contactFaxNumber?.invalid &&\r\n              contactForm.controls.contactFaxNumber?.errors.required &&\r\n              (contactForm.controls.contactFaxNumber?.dirty ||\r\n                contactForm.controls.contactFaxNumber?.touched)\r\n            \"\r\n          >\r\n          Contact Fax Number is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div> -->\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-store-info',\r\n  templateUrl: './store-info.component.html',\r\n  styleUrls: ['./store-info.component.scss']\r\n})\r\nexport class StoreInfoComponent implements OnInit {\r\n  StoreForm: FormGroup;\r\n  country = [\r\n    {id: 1, name: 'EN'},\r\n    {id: 2, name: 'FR'},\r\n    {id: 3, name: 'GR'},\r\n  ]\r\n\r\n  constructor( private fb: FormBuilder,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createStoreForm();\r\n\r\n  }\r\n\r\n\r\n  createStoreForm() {\r\n    this.StoreForm = this.fb.group({\r\n      address1: new FormControl('', [Validators.required]),\r\n      address2: new FormControl('', []),\r\n      postCode:  new FormControl('', [Validators.required]),\r\n      city:  new FormControl('', [Validators.required]),\r\n      country:  new FormControl('', [Validators.required]),\r\n\r\n    });\r\n  }\r\n\r\n\r\n  /* Function Name : saveData\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Object That Send To The Parent To Save It\r\n   * PARAMS :\r\n   */\r\n  saveData() {\r\n    const saveStoreData = {\r\n      address1: this.StoreForm.controls.address1.value ,\r\n      address2: this.StoreForm.controls.address2.value ,\r\n      postCode: this.StoreForm.controls.postCode.value ,\r\n      city: this.StoreForm.controls.city.value ,\r\n      country: this.StoreForm.controls.country.value ,\r\n\r\n    }\r\n    return saveStoreData;\r\n  }\r\n\r\n  /* Function Name : checkValidation\r\n   * Author :\r\n   * Created Date :\r\n   * Modified Date : *\r\n   * Purpose : Check If The User Return a Valid Values Or Not\r\n   * PARAMS :\r\n   */\r\n  checkValidation() {\r\n    if(this.StoreForm.valid) {\r\n      return this.StoreForm.value;\r\n    } else {\r\n      return 'notvalid';\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"company_form\">\r\n  <form [formGroup]=\"StoreForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * address1  </mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"address1\"\r\n          formControlName=\"address1\"\r\n          >\r\n          <mat-error *ngIf=\"StoreForm.controls.address1?.invalid && StoreForm.controls.address1?.errors && (StoreForm.controls.address1?.dirty || StoreForm.controls.address1?.touched)\">\r\n            address1 is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> address2 </mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"address2\"\r\n          formControlName=\"address2\"\r\n          >\r\n\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * postCode  </mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"postCode\"\r\n          formControlName=\"postCode\"\r\n          >\r\n          <mat-error *ngIf=\"StoreForm.controls.postCode?.invalid && StoreForm.controls.postCode?.errors && (StoreForm.controls.postCode?.dirty || StoreForm.controls.postCode?.touched)\">\r\n            postCode is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 \">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label> * city</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"city\"\r\n          formControlName=\"city\"\r\n          >\r\n          <mat-error *ngIf=\"StoreForm.controls.city?.invalid &&\r\n          StoreForm.controls.city?.errors &&\r\n            (StoreForm.controls.city?.dirty ||\r\n            StoreForm.controls.city?.touched)\">\r\n            city is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"col-12 col-md-6 col-lg-6\">\r\n        <mat-form-field  appearance=\"outline\">\r\n          <mat-select formControlName=\"country\">\r\n            <mat-option value=\"\"> Choose country </mat-option>\r\n            <mat-option\r\n                *ngFor=\"let lang of country\"\r\n                value=\"{{ lang.id }}\"\r\n            >\r\n            {{lang.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n          <mat-error\r\n            *ngIf=\"\r\n            StoreForm.controls.country?.invalid &&\r\n            StoreForm.controls.country?.errors.required &&\r\n              (StoreForm.controls.country?.dirty ||\r\n              StoreForm.controls.country?.touched)\r\n            \"\r\n          >\r\n          country Is Required\r\n          </mat-error>\r\n      </mat-form-field>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ViewChild } from '@angular/core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport{FormControl,FormGroup,Validators }from '@angular/forms'\r\nimport { Router } from '@angular/router';\r\nimport { AlertService } from 'src/app/core/services';\r\nimport { AuthApiService } from '../../../services/api/auth-api.service';\r\nimport { BasicInfoComponent } from '../_controls/basic-info/basic-info.component';\r\nimport { CompanyInfoComponent } from '../_controls/company-info/company-info.component';\r\nimport { ContactInfoComponent } from '../_controls/contact-info/contact-info.component';\r\nimport { StoreInfoComponent } from '../_controls/store-info/store-info.component';\r\n@Component({\r\n  selector: 'app-register-business-user',\r\n  templateUrl: './register-business-user.component.html',\r\n  styleUrls: ['../auth.style.scss']\r\n})\r\nexport class RegisterBusinessUserComponent implements OnInit {\r\n  @ViewChild('tabgroup', {static: false}) tabgroup;\r\n  @ViewChild(ContactInfoComponent) contactInfo: ContactInfoComponent;\r\n  @ViewChild(CompanyInfoComponent) companyInfo: CompanyInfoComponent;\r\n  @ViewChild(StoreInfoComponent) storeInfo: StoreInfoComponent;\r\n  @ViewChild(BasicInfoComponent) basicInfo: BasicInfoComponent;\r\n  showNext = true;\r\n  showPrev = false;\r\n  showSaveNext = false;\r\n  active = false;\r\n\r\n  constructor(\r\n    private authService: AuthApiService,\r\n    private alertSrvc:AlertService,\r\n    private router:Router\r\n  ) { }\r\n\r\nngOnInit(): void {\r\n  this.checkPrevNext(0);\r\n  if (this.tabgroup) {\r\n    for (let i = 1; i < this.tabgroup._tabs._results.length; i++) {\r\n      if (i <= 6) {\r\n        return;\r\n      } else {\r\n        this.active = this.tabgroup._tabs._results[i]._disabled;\r\n        // console.log('this.active', this.active);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncheckPrevNext(currentIndex) {\r\n  switch (currentIndex) {\r\n    case 0:\r\n      this.showNext = true;\r\n      this.showPrev = false;\r\n      break;\r\n    case 1:\r\n    case 2:\r\n      this.showNext = true;\r\n      this.showPrev = true;\r\n      break;\r\n    case 3:\r\n      this.showNext = false;\r\n      this.showPrev = true;\r\n      this.checkTab(3, 'n')\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\ncheckTab(currentTab, clickName) {\r\n  // console.log('this.dreamInfo.saveDreamJob()[\"dream_job_type\"]',this.dreamInfo.saveDreamJob()[\"dream_job_type\"])\r\n  // console.log('*/*/*/', this.levelStepsDataObj)\r\n  switch (clickName) {\r\n    case 'n':\r\n      // tslint:disable-next-line: prefer-const\r\n      let nextTab: any = `${currentTab + 1}`;\r\n      console.log('currentTab',currentTab)\r\n      if (this.tabgroup._tabs._results[currentTab].isActive) {\r\n        // this.tabgroup._tabs._results[nextTab]._disabled = this.active;\r\n        this.tabgroup.selectedIndex = nextTab;\r\n        // this.icon.nativeElement.children[nextTab].classList.value =\r\n        //   'progressbar_icon_active';\r\n      }\r\n      // if(currentTab == 0) {\r\n        // if(nextTab != 4) {\r\n          // this.tabgroup._tabs._results[nextTab]._disabled = true;\r\n        // } else {\r\n          // return\r\n        // }\r\n      // }\r\n      // if(currentTab == 3) {\r\n      //   this.tabgroup._tabs._results[nextTab]._disabled = true;\r\n      // }\r\n\r\n      if(currentTab == 0\r\n      || currentTab == 1\r\n      || currentTab == 2\r\n      || currentTab == 3 && this.basicInfo.checkValidation() == \"notvalid\"\r\n      ) {\r\n        this.showSaveNext = false;\r\n      } else {\r\n        this.showSaveNext = true\r\n      }\r\n      if(\r\n        this.basicInfo.checkValidation()\r\n      &&\r\n      currentTab == 3) {\r\n        this.showSaveNext = true\r\n      } else {\r\n        this.showSaveNext = false\r\n      }\r\n      break;\r\n    case 'p':\r\n      // tslint:disable-next-line: prefer-const\r\n      let prevTab:any = `${currentTab - 1}`;\r\n      this.tabgroup.selectedIndex = prevTab;\r\n      if(currentTab == 0\r\n        || currentTab == 1\r\n        || currentTab == 2\r\n        || currentTab == 3) {\r\n          this.showSaveNext = false;\r\n        } else {\r\n          this.showSaveNext = true\r\n        }\r\n      if(\r\n          (this.basicInfo.checkValidation() != \"notvalid\")\r\n          ||\r\n          (this.basicInfo.checkValidation() == \"notvalid\" )) {\r\n          this.showSaveNext = false\r\n        } else {\r\n          this.showSaveNext = true\r\n        }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nprev() {\r\n  switch (this.tabgroup.selectedIndex) {\r\n    case 1:\r\n      console.log('currentIndex', this.tabgroup.selectedIndex);\r\n      this.checkTab(1, 'p');\r\n      this.checkPrevNext(0);\r\n      break;\r\n    case 2:\r\n      console.log('currentIndex', this.tabgroup.selectedIndex);\r\n      this.checkTab(2, 'p');\r\n      this.checkPrevNext(1);\r\n      break;\r\n    case 3:\r\n      console.log('currentIndex', this.tabgroup.selectedIndex);\r\n      this.checkTab(3, 'p');\r\n      this.checkPrevNext(2);\r\n      break;\r\n    // case 4:\r\n    //   console.log('currentIndex', this.tabgroup.selectedIndex);\r\n    //   this.checkTab(4, 'p');\r\n    //   this.checkPrevNext(3);\r\n    //   break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nnext() {\r\n  switch (this.tabgroup.selectedIndex) {\r\n    case 0:\r\n      if (this.companyInfo.checkValidation() == \"notvalid\") {\r\n        this.companyInfo.companyForm.markAllAsTouched();\r\n      } else {\r\n        this.checkTab(0, \"n\");\r\n        this.checkPrevNext(1);\r\n        console.log('data from company', this.companyInfo.saveData().companyName)\r\n        console.log('data from company', this.companyInfo.saveData().commercialName)\r\n        console.log('data from company', this.companyInfo.saveData().siret)\r\n        console.log('data from company', this.companyInfo.saveData().langauge)\r\n      }\r\n      break;\r\n    case 1:\r\n      if (this.storeInfo.checkValidation() == \"notvalid\") {\r\n        this.storeInfo.StoreForm.markAllAsTouched();\r\n      } else {\r\n        this.checkTab(1, \"n\");\r\n        this.checkPrevNext(2);\r\n        console.log('data from store', this.storeInfo.saveData().address1)\r\n        console.log('data from store', this.storeInfo.saveData().address2)\r\n        console.log('data from store', this.storeInfo.saveData().postCode)\r\n        console.log('data from store', this.storeInfo.saveData().city)\r\n        console.log('data from store', this.storeInfo.saveData().country)\r\n      }\r\n      break;\r\n    case 2:\r\n      if (this.contactInfo.checkValidation() == \"notvalid\") {\r\n        this.contactInfo.contactForm.markAllAsTouched();\r\n      } else {\r\n        this.checkTab(2, \"n\");\r\n        this.checkPrevNext(3);\r\n        console.log('data from contact', this.contactInfo.saveData().firstName)\r\n        console.log('data from contact', this.contactInfo.saveData().contactTelefonNumber)\r\n        console.log('data from contact', this.contactInfo.saveData().contactEmail)\r\n        console.log('data from contact', this.contactInfo.saveData().contactLanguge)\r\n      }\r\n      // if (this.educationInfo.checkEducationValidation() == \"notvalid\") {\r\n      //   this.educationInfo.educationForm.markAllAsTouched();\r\n      // } else {\r\n      //   this.checkTab(2, \"n\");\r\n      //   this.checkPrevNext(3);\r\n      // }\r\n      break;\r\n    case 3:\r\n      this.checkTab(3, \"n\");\r\n      this.checkPrevNext(4);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\n\r\n\r\nsaveAllData() {\r\n  debugger\r\n  if(this.basicInfo.checkValidation()) {\r\n    console.log('confirm', this.basicInfo.saveData().confirmPassword)\r\n    let userData = {\r\n      \"companyName\": this.companyInfo.saveData().companyName,\r\n      \"commercialName\": this.companyInfo.saveData().commercialName  ,\r\n      \"ape\": this.companyInfo.saveData().ape,\r\n      \"siret\": this.companyInfo.saveData().siret,\r\n      \"language\": this.companyInfo.saveData().langauge,\r\n      \"email\": this.companyInfo.saveData().email,\r\n      \"telefonNumber\": this.companyInfo.saveData().telefonNumber,\r\n      \"phoneNumber\": this.companyInfo.saveData().phoneNumber,\r\n      \"address1\": this.storeInfo.saveData().address1,\r\n      \"address2\": this.storeInfo.saveData().address2,\r\n      \"postCode\": this.storeInfo.saveData().postCode,\r\n      \"city\": this.storeInfo.saveData().city,\r\n      \"country\": this.storeInfo.saveData().country,\r\n      \"firstName\": this.contactInfo.saveData().firstName,\r\n      \"lastName\": this.contactInfo.saveData().lastName,\r\n      \"contactEmail\": this.contactInfo.saveData().contactEmail,\r\n      \"contactTelefonNumber\": this.contactInfo.saveData().contactTelefonNumber,\r\n      \"contactPhoneNumber\": this.contactInfo.saveData().contactPhoneNumber,\r\n      \"contactLanguge\": this.contactInfo.saveData().contactLanguge,\r\n      \"title\": this.contactInfo.saveData().title,\r\n      \"userName\": this.basicInfo.saveData().userName,\r\n      \"password\": this.basicInfo.saveData().password,\r\n      \"confirmPassword\": this.basicInfo.saveData().confirmPassword,\r\n    };\r\n    console.log('userData', userData)\r\n    this.authService.registerBusiness(userData).subscribe(\r\n      (res) => {\r\n        console.log('res from server', res)\r\n        this.alertSrvc.success('Registered Successfully')\r\n          this.router.navigate(['/login'])\r\n      }, (err:HttpErrorResponse) => {\r\n        this.alertSrvc.error(err.error.Message)\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\n}\r\n","\r\n        <div class=\"auth_heading\">\r\n            <div class=\"_D_Flex\">\r\n                <a routerLink=\"/register\">\r\n                    <i class=\"fas fa-arrow-left\"></i>\r\n                </a>\r\n                <h2>Register As a Business user</h2>\r\n            </div>\r\n\r\n            <span>Please fill in the form below to register</span>\r\n        </div>\r\n\r\n        <section class=\"_angular_tabs\">\r\n          <mat-tab-group #tabgroup (selectedTabChange)=\"checkPrevNext($event)\">\r\n            <mat-tab label=\"Company Info\" [disabled]=\"!active\">\r\n                <app-company-info></app-company-info>\r\n            </mat-tab>\r\n            <!-- <mat-tab label=\"Store Info\"> -->\r\n            <mat-tab label=\"Store Info\" [disabled]=\"!active\">\r\n                <app-store-info></app-store-info>\r\n            </mat-tab>\r\n            <!-- <mat-tab label=\"Contact Info\"> -->\r\n            <mat-tab label=\"Contact Info\" [disabled]=\"!active\">\r\n              <app-contact-info></app-contact-info>\r\n            </mat-tab>\r\n            <!-- <mat-tab label=\"Basic Info\"> -->\r\n            <mat-tab label=\"Basic Info\" [disabled]=\"!active\">\r\n              <app-basic-info></app-basic-info>\r\n            </mat-tab>\r\n          </mat-tab-group>\r\n        </section>\r\n          <div class=\"_mat_btn_small\" *ngIf=\"showPrev\">\r\n            <button  mat-stroked-button (click)=\"prev()\">Prev</button>\r\n          </div>\r\n          <div class=\"_mat_btn_small\" *ngIf=\"showNext\">\r\n            <button mat-flat-button  (click)=\"next()\">Next</button>\r\n          </div>\r\n\r\n          <div class=\"_mat_btn_small\" *ngIf=\"showSaveNext\">\r\n            <button mat-flat-button (click)=\"saveAllData()\"> Save </button>\r\n        </div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-register-entry-point',\r\n  templateUrl: './register-entry-point.component.html',\r\n  styleUrls: ['../auth.style.scss']\r\n})\r\nexport class RegisterEntryPointComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"auth_heading \">\r\n  <h2>Register</h2>\r\n  <p>Please fill in the form below to Register</p>\r\n</div>\r\n\r\n<div class=\"registering_type\">\r\n  <a href=\"\" class=\" type_Box_one active\" [routerLink]=\"['/register/basic']\">\r\n    <img src=\"../../../../../../assets/images/Normal_user.png\" alt=\"\">\r\n    <h5>Normal User</h5>\r\n  </a>\r\n  <a href=\"\" class=\"type_Box_one\" [routerLink]=\"['/register/business']\">\r\n    <img src=\"../../../../../../assets/images/Professional_User.png\" alt=\"\">\r\n    <h5>Professional User</h5>\r\n  </a>\r\n</div>\r\n\r\n\r\n  <div class=\"Btn_action text-center\">\r\n    <!-- <button class=\"_main_button\" type=\"submit\">Next</button> -->\r\n    <h6>if you already have an account <a [routerLink]=\"['/login']\" >login</a></h6>\r\n  </div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators, } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService, AuthService } from 'src/app/core/services';\r\nimport { User } from 'src/app/models/user.model';\r\nimport { MustMatch } from 'src/app/shared/validations/custom-validation';\r\nimport { RegisterationRequest } from '../../../models';\r\nimport { UserType } from '../../../models/userType.enum';\r\nimport { AuthApiService } from '../../../services/api/auth-api.service';\r\n\r\n@Component({\r\n  selector: 'app-register-normal-user',\r\n  templateUrl: './register-normal-user.component.html',\r\n  styleUrls: ['../auth.style.scss'],\r\n  providers: [AuthApiService]\r\n})\r\nexport class RegisterNormalUserComponent implements OnInit {\r\n  userData: User\r\n  myForm;\r\n  get userNameCtrl() { return this.myForm.get('userName') }\r\n  get firstNameCtrl() { return this.myForm.get('firstName') }\r\n  get lastNameCtrl() { return this.myForm.get('lastName') }\r\n  get mobileNumberCtrl() { return this.myForm.get('mobileNumber') }\r\n  get emailCtrl() { return this.myForm.get('email') }\r\n  get passwordCtrl() { return this.myForm.get('password') }\r\n  get confirmPasswordCtrl() { return this.myForm.get('confirmPassword') }\r\n  constructor(\r\n    private authApiService: AuthApiService,\r\n    private alertSrvc: AlertService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createNormalUserForm();\r\n  }\r\n  createNormalUserForm() {\r\n    this.myForm = this.fb.group(\r\n      {\r\n        userName: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(16),\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        firstName: [\r\n          \"\",\r\n          [Validators.required,\r\n          this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        lastName: [\r\n          \"\",\r\n          [Validators.required,\r\n          this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        mobileNumber: [\r\n          \"\",\r\n          [Validators.required,\r\n          this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        email: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.email,\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n        password: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(6),\r\n            Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?{}()&])[A-Za-z\\d@$!%*#?{}()&]{8,}$/),\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n\r\n        confirmPassword: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            this.noWhitespaceValidator,\r\n          ],\r\n        ],\r\n      },\r\n      { validator: MustMatch('password','confirmPassword') }\r\n    )\r\n  }\r\n\r\n\r\n\r\n  public passwordMatchValidator(control: AbstractControl) {\r\n    // debugger;\r\n    const password: string = control.get(\"password\").value; // get password from our password form control\r\n    const confirmPassword: string = control.get(\"confirmPassword\").value; // get password from our confirmPassword form control\r\n    // compare is the password math\r\n    if (password !== confirmPassword) {\r\n      // if they don't match, set an error in our confirmPassword form control\r\n      control.get(\"confirmPassword\").setErrors({ NotMatchPassword: true });\r\n      console.log('conf', control.get('confirmPassword'))\r\n    }\r\n  }\r\n\r\n  /* Function Name : noWhitespaceValidator\r\n   * Author :\r\n   * Created Date : 10-01-2019\r\n   * Modified Date : *\r\n   * Purpose : to validate whitespace of  text field\r\n   * PARAMS : control\r\n   */\r\n\r\n  public noWhitespaceValidator(control: FormControl) {\r\n    if (control.value) {\r\n      const isWhitespace = (control.value || \"\").trim().length === 0;\r\n      const isValid = !isWhitespace;\r\n      return isValid ? null : { whitespace: true };\r\n    }\r\n  }\r\n\r\n  register(mydata) {\r\n    debugger\r\n    if (this.myForm.invalid) {\r\n      this.myForm.markAllAsTouched()\r\n      return this.alertSrvc.error('Complete all the required fields(*) first')\r\n    }\r\n    let requestBody: RegisterationRequest = new RegisterationRequest()\r\n\r\n    console.log(requestBody)\r\n\r\n    let myformValue = this.myForm.value\r\n    requestBody.email = myformValue.email\r\n    requestBody.password = myformValue.password\r\n    requestBody.confirmPassword = myformValue.confirmPassword\r\n    requestBody.firstName = myformValue.firstName\r\n    requestBody.lastName = myformValue.lastName\r\n    requestBody.userName = myformValue.userName\r\n    requestBody.userType = UserType.basic\r\n    this.authApiService.register(requestBody).subscribe(\r\n      (res) => {\r\n        this.alertSrvc.success('Registered Successfully')\r\n        this.router.navigate(['/login'])\r\n      }, (err: HttpErrorResponse) => {\r\n        this.alertSrvc.error(err.error.Message)\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"auth_heading\">\r\n  <div class=\"_D_Flex\">\r\n    <a routerLink=\"/register\">\r\n      <i class=\"fas fa-arrow-left\"></i>\r\n    </a>\r\n    <h2>Register As Normal user</h2>\r\n  </div>\r\n    <span>Please fill in the form below to register</span>\r\n</div>\r\n<div class=\"input_form\">\r\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"register(myForm)\" >\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>first Name</mat-label>\r\n          <input\r\n          type=\"text\"\r\n          matInput\r\n          name=\"firstName\"\r\n          formControlName=\"firstName\"\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          >\r\n          <mat-error\r\n\r\n          *ngIf=\"firstNameCtrl.invalid==true && firstNameCtrl.touched == true \"  class=\"text-danger\" role=\"alert\" >\r\n            first Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>last Name</mat-label>\r\n          <input\r\n          formControlName=\"lastName\"\r\n          matInput\r\n          appNumberCharacters\r\n          constraint=\"charsOnly\"\r\n          type=\"text\">\r\n          <mat-error *ngIf=\"lastNameCtrl.invalid==true &&lastNameCtrl.touched == true \"class=\"text-danger\" role=\"alert\" >\r\n            last Name is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>user Name</mat-label>\r\n          <input matInput\r\n          formControlName=\"userName\" type=\"text\">\r\n            <mat-error *ngIf=\"userNameCtrl.invalid==true && userNameCtrl.touched == true \" class=\"text-danger\" role=\"alert\" >\r\n              UserName is Required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput  formControlName=\"email\" type=\"email\"\r\n          id=\"exampleInputEmail1\"\r\n            aria-describedby=\"emailHelp\"\r\n                >\r\n            <!-- <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone\r\n                else.</small> -->\r\n                <mat-error *ngIf=\"emailCtrl.invalid == true\r\n                && emailCtrl.touched == true &&\r\n                emailCtrl.errors.required\">\r\n                  Email is required\r\n                </mat-error>\r\n                <mat-error *ngIf=\"emailCtrl.invalid == true\r\n                && emailCtrl.touched == true &&\r\n                emailCtrl.errors.email\">\r\n                Email is invalid\r\n                </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\" style=\"margin-bottom: 5px;\">\r\n            <mat-label>Password</mat-label>\r\n            <input matInput formControlName=\"password\"  type=\"password\" id=\"exampleInputPassword1\">\r\n            <mat-error\r\n            *ngIf=\"\r\n              myForm.controls.password?.invalid &&\r\n              myForm.controls.password?.errors.pattern &&\r\n              (myForm.controls.password?.dirty ||\r\n              myForm.controls.password?.touched)\r\n              \">\r\n              At least 8 characters, 1 number, 1 uppercase letter, 1 lowercase letter, 1 special character\r\n            </mat-error>\r\n\r\n            <mat-error\r\n              *ngIf=\"\r\n                myForm.controls.password?.invalid &&\r\n                myForm.controls.password?.errors.required &&\r\n                (myForm.controls.password?.dirty ||\r\n                myForm.controls.password?.touched)\r\n                \"\r\n            >\r\n              Password Is Required\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Confirm Password</mat-label>\r\n          <input matInput formControlName=\"confirmPassword\"   type=\"password\" id=\"exampleInputPassword1\" >\r\n            <mat-error\r\n              *ngIf=\"\r\n              myForm.controls.confirmPassword?.invalid\r\n              &&\r\n                (myForm.controls.confirmPassword?.dirty ||\r\n                myForm.controls.confirmPassword?.touched)\r\n              \"\r\n            >\r\n              <span *ngIf=\"myForm.controls.confirmPassword?.hasError('mustMatch')\">\r\n                Password & Confirm Password does not match.\r\n              </span>\r\n              <span *ngIf=\"myForm.controls.confirmPassword?.hasError('required')\">\r\n                confirm password is required\r\n              </span>\r\n          </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Mobile Number</mat-label>\r\n            <input matInput\r\n            formControlName=\"mobileNumber\"\r\n            appNumberCharacters\r\n            constraint=\"numbersWithSpecial\"\r\n            type=\"text\" >\r\n            <mat-error *ngIf=\"mobileNumberCtrl.invalid == true &&\r\n            mobileNumberCtrl.touched == true &&\r\n            mobileNumberCtrl.errors.required\">\r\n            mobileNumber is required\r\n            </mat-error>\r\n            <!-- <mat-error *ngIf=\"mobileNumberCtrl.invalid == true &&\r\n            mobileNumberCtrl.touched == true &&\r\n            mobileNumberCtrl.errors.pattern\">\r\n              mobileNumber is invalid\r\n            </mat-error> -->\r\n          </mat-form-field>\r\n\r\n\r\n        <div class=\"Btn_action pb-5\">\r\n          <button mat-flat-button color=\"primary\">register</button>\r\n          <h6>if you already have an account\r\n              <a routerLink=\"/login\" >login</a>\r\n          </h6>\r\n        </div>\r\n\r\n    </form>\r\n</div>\r\n","export class ConfirmEmailRequest {\r\n  code :string\r\n  userId :string\r\n}\r\n","export class ForgetPasswordRequest {\r\n    email: string\r\n}","export * from './forget-password-request.model'\r\nexport * from './login-request.model'\r\nexport * from './register-request.model'\r\nexport * from './reset-password-request.model'\r\nexport * from './confirm-email-request.model'\r\nexport * from './register-request-business.model'\r\nexport * from './userData.model'\r\nexport * from './userType.enum'\r\n","export class LoginRequest {\r\n    email: string\r\n    password: string\r\n}","export class RegisterationRequestBusiness {\r\n  companyName: string;\r\n  commercialName: string;\r\n  email: string;\r\n  userName: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n  ape: string;\r\n  siret: string;\r\n  language: string;\r\n  telefonNumber: string;\r\n  phoneNumber: string;\r\n  // faxNumber: string;\r\n  address1: string;\r\n  address2: string;\r\n  postCode: string;\r\n  city: string;\r\n  country: string;\r\n  title: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  contactEmail: string;\r\n  contactTelefonNumber: string;\r\n  contactPhoneNumber: string;\r\n  // contactFaxNumber: string;\r\n  contactLanguge: string\r\n}\r\n","export class RegisterationRequest {\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    userName: string\r\n    password: string\r\n    confirmPassword: string\r\n    userType: string\r\n}\r\n","export class ResetPasswordRequest {\r\n    email: string\r\n    token: string\r\n    password: string\r\n    confirmPassword: string\r\n}","export class UserData {\r\n  email: string\r\n  id: string\r\n  isVerified: boolean\r\n  jwToken: string\r\n  roles: string []\r\n  userName: string\r\n}\r\n","export enum UserType {\r\n  basic = 'basic',\r\n  business = 'business'\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n          // return if another validator has already found an error on the matchingControl\r\n          return;\r\n      }\r\n\r\n      // set error on matchingControl if validation fails\r\n      if (control.value !== matchingControl.value) {\r\n          matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n          matchingControl.setErrors(null);\r\n      }\r\n  }\r\n}\r\n"]}