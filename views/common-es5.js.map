{"version":3,"sources":["webpack:///src/app/modules/profile/services/profile.service.ts","webpack:///src/app/shared/validations/custom-validation.ts"],"names":["ProfileService","http","userId","get","baseUrlWithoutVersion","userData","put","id","baseUrl","orderNumber","data","post","addressId","providedIn","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","value","setErrors"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaA,c;AAEX,8BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;oCAG7BC,M,EAAQ;AAClB,iBAAO,KAAKD,IAAL,CAAUE,GAAV,WAAoC,yEAAIC,qBAAxC,oCAAuFF,MAAvF,EAAP;AACD;;;wCAEeA,M,EAAQG,Q,EAAU;AAChC,iBAAO,KAAKJ,IAAL,CAAUK,GAAV,WAA8B,yEAAIF,qBAAlC,iCAA8EF,MAA9E,GAAwFG,QAAxF,CAAP;AACD;;;2CACkBH,M,EAAQG,Q,EAAU;AACnC,iBAAO,KAAKJ,IAAL,CAAUK,GAAV,WAA8B,yEAAIF,qBAAlC,oCAAiFF,MAAjF,GAA2FG,QAA3F,CAAP;AACD;;;yCAEgBE,E,EAAI;AACnB,iBAAO,KAAKN,IAAL,CAAUE,GAAV,WAA8B,yEAAIK,OAAlC,uCAAsED,EAAtE,EAAP;AACD;;;6CACoBA,E,EAAI;AACvB,iBAAO,KAAKN,IAAL,CAAUE,GAAV,WAA8B,yEAAIK,OAAlC,gDAA+ED,EAA/E,EAAP;AACD;;;8CACqBE,W,EAAqB;AACzC,iBAAO,KAAKR,IAAL,CAAUE,GAAV,WAAqC,yEAAIK,OAAzC,iCAAuEC,WAAvE,EAAP;AACD;;;sCAEaC,I,EAAM;AAClB,iBAAO,KAAKT,IAAL,CAAUU,IAAV,WAAkB,yEAAIP,qBAAtB,6BAAqEM,IAArE,CAAP;AACD;;;mCAEUA,I,EAAM;AACf,iBAAO,KAAKT,IAAL,CAAUU,IAAV,WAAkB,yEAAIH,OAAtB,cAAwCE,IAAxC,CAAP;AACD;;;sCAEaE,S,EAAmBF,I,EAAM;AACrC,iBAAO,KAAKT,IAAL,CAAUK,GAAV,WAAiB,yEAAIE,OAArB,qBAAuCI,SAAvC,GAAoDF,IAApD,CAAP;AACD;;;;;;;uBApCUV,c,EAAc,uH;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVa,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;ACP3B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;;;AACO,aAASC,SAAT,CAAmBC,WAAnB,EAAwCC,mBAAxC,EAAqE;AAC1E,aAAO,UAACC,SAAD,EAA0B;AAC7B,YAAMC,OAAO,GAAGD,SAAS,CAACE,QAAV,CAAmBJ,WAAnB,CAAhB;AACA,YAAMK,eAAe,GAAGH,SAAS,CAACE,QAAV,CAAmBH,mBAAnB,CAAxB;;AAEA,YAAII,eAAe,CAACC,MAAhB,IAA0B,CAACD,eAAe,CAACC,MAAhB,CAAuBC,SAAtD,EAAiE;AAC7D;AACA;AACH,SAP4B,CAS7B;;;AACA,YAAIJ,OAAO,CAACK,KAAR,KAAkBH,eAAe,CAACG,KAAtC,EAA6C;AACzCH,yBAAe,CAACI,SAAhB,CAA0B;AAAEF,qBAAS,EAAE;AAAb,WAA1B;AACH,SAFD,MAEO;AACHF,yBAAe,CAACI,SAAhB,CAA0B,IAA1B;AACH;AACJ,OAfD;AAgBD","file":"common-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiResponse } from 'src/app/models/api-response.model';\r\nimport { environment as env } from 'src/environments/environment';\r\nimport { Order } from '../../products/components/checkout/order-over-view.model';\r\nimport { User } from '../model/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  getUserData(userId) {\r\n    return this.http.get<ApiResponse<User>>(`${env.baseUrlWithoutVersion}Account/GetUserById?id=${userId}`);\r\n  }\r\n\r\n  updateBasicUser(userId, userData) {\r\n    return this.http.put<ApiResponse>(`${env.baseUrlWithoutVersion}Account/updateBasic-${userId}`, userData);\r\n  }\r\n  updateBusinessUser(userId, userData) {\r\n    return this.http.put<ApiResponse>(`${env.baseUrlWithoutVersion}Account/updateBusiness-${userId}`, userData);\r\n  }\r\n\r\n  getAllTrackOrder(id) {\r\n    return this.http.get<ApiResponse>(`${env.baseUrl}Order?FilterValue[userId]=${id}`);\r\n  }\r\n  getAllTrackOrderinfo(id) {\r\n    return this.http.get<ApiResponse>(`${env.baseUrl}OrderInfo?FilterValue[orderNumber]=${id}`);\r\n  }\r\n  getOrderByOrderNumber(orderNumber: number) {\r\n    return this.http.get<ApiResponse<Order>>(`${env.baseUrl}Order/byOrderNumber-${orderNumber}`)\r\n  }\r\n\r\n  resetPassword(data) {\r\n    return this.http.post(`${env.baseUrlWithoutVersion}Account/reset-password`, data)\r\n  }\r\n\r\n  addAddress(data) {\r\n    return this.http.post(`${env.baseUrl}Address`, data)\r\n  }\r\n\r\n  updateAddress(addressId: number, data) {\r\n    return this.http.put(`${env.baseUrl}Address/${addressId}`, data)\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n          // return if another validator has already found an error on the matchingControl\r\n          return;\r\n      }\r\n\r\n      // set error on matchingControl if validation fails\r\n      if (control.value !== matchingControl.value) {\r\n          matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n          matchingControl.setErrors(null);\r\n      }\r\n  }\r\n}\r\n"]}